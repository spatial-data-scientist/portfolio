{"version":3,"names":["colorPickerCss","CalciteColorPickerStyle0","throttleFor60FpsInMs","ColorPicker","this","internalColorUpdateContext","mode","CSSColorMode","HEX","shiftKeyChannelAdjustment","handleTabActivate","event","channelMode","currentTarget","getAttribute","updateChannelsFromColor","color","handleColorFieldScopeKeyDown","key","arrowKeyToXYOffset","ArrowUp","x","y","ArrowRight","ArrowDown","ArrowLeft","preventDefault","scopeOrientation","captureColorFieldColor","colorFieldScopeLeft","colorFieldScopeTop","handleHueScopeKeyDown","modifier","shiftKey","arrowKeyToXOffset","delta","hue","baseColorFieldColor","internalColorSet","handleHexInputChange","stopPropagation","isClearable","input","target","hex","value","normalizedHex","normalizeHex","hexify","alphaCompatible","Color","handleSavedColorSelect","swatch","handleChannelInput","channelIndex","Number","isAlphaChannel","limit","OPACITY_LIMITS","max","RGB_LIMITS","Object","keys","HSV_LIMITS","inputValue","adjustedValue","clamped","clamp","toString","handleChannelChange","channels","shouldClearChannels","opacityToAlpha","updateColorFromChannels","handleSavedColorKeyDown","isActivationKey","handleColorFieldPointerDown","isPrimaryPointerButton","offsetX","offsetY","window","addEventListener","globalPointerMoveHandler","globalPointerUpHandler","once","activeCanvasInfo","context","colorFieldRenderingContext","bounds","canvas","getBoundingClientRect","colorFieldScopeNode","focus","handleHueSliderPointerDown","hueSliderRenderingContext","captureHueSliderColor","hueScopeNode","handleOpacitySliderPointerDown","opacitySliderRenderingContext","captureOpacitySliderValue","opacityScopeNode","previouslyDragging","drawColorControls","calciteColorPickerChange","emit","el","isConnected","samplingX","samplingY","clientX","clientY","matches","width","height","storeColorFieldScope","node","storeHueScope","renderChannelsTabTitle","activeChannelMode","messages","selected","label","rgb","hsv","h","class","CSS","colorMode","onCalciteTabsActivate","renderChannelsTab","alphaChannel","isRgb","channelAriaLabels","red","green","blue","saturation","direction","getElementDir","channelsToRender","slice","control","dir","map","channelValue","index","alphaToOpacity","renderChannel","ariaLabel","suffix","channel","lang","effectiveLocale","numberButtonType","numberingSystem","onCalciteInputNumberChange","onCalciteInputNumberInput","onKeyDown","handleKeyDown","scale","style","marginLeft","suffixText","deleteColor","colorToDelete","inStorage","savedColors","indexOf","filter","storageKey","DEFAULT_STORAGE_KEY_PREFIX","storageId","localStorage","setItem","JSON","stringify","saveColor","colorToSave","alreadySaved","throttle","type","drawColorField","drawHueSlider","drawOpacitySlider","skipEqual","dimensions","colorField","Math","round","s","v","saturationv","initColorField","getContext","updateCanvasSize","initHueSlider","initOpacitySlider","storeOpacityScope","handleOpacityScopeKeyDown","alpha","DEFAULT_COLOR","toChannels","DIMENSIONS","m","handleAllowEmptyOrClearableChange","clearable","allowEmpty","handleAlphaChannelChange","format","console","warn","handleAlphaChannelDimensionsChange","effectiveSliderWidth","getSliderWidth","handleColorChange","oldColor","previousColor","handleFormatOrAlphaChannelChange","setMode","handleScaleChange","updateDimensions","onMessagesChange","handleValueChange","oldValue","checkMode","modeChanged","nextMode","parseMode","showIncompatibleColorWarning","dragging","calciteColorPickerInput","normalizeColor","colorChanged","colorEqual","endsWith","effectiveLocaleChange","updateMessages","handleChannelKeyUpOrDown","composedPath","some","classList","contains","complementaryBump","setFocus","componentFocusable","componentWillLoad","setUpLoadableComponent","willSetNoColor","parsedMode","valueIsCompatible","initialColor","getItem","parse","setUpMessages","connectedCallback","connectInteractive","connectLocalized","connectMessages","componentDidLoad","setComponentLoaded","disconnectedCallback","removeEventListener","disconnectInteractive","disconnectLocalized","disconnectMessages","componentDidRender","updateHostInteraction","render","channelsDisabled","thumb","radius","thumbRadius","hexDisabled","hideChannels","hideHex","hideSaved","hueScopeLeft","opacityScopeLeft","savedDisabled","sliderWidth","selectedColorInHex","hueTop","hueLeft","opacityTop","opacityLeft","noColor","vertical","noHex","noChannels","noSaved","adjustedColorFieldScopeLeft","adjustedColorFieldScopeTop","getAdjustedScopePosition","adjustedHueScopeLeft","adjustedHueScopeTop","adjustedOpacityScopeLeft","adjustedOpacityScopeTop","InteractiveContainer","disabled","container","controlAndScope","onPointerDown","ref","scope","colorFieldScope","role","top","left","tabindex","previewAndSliders","preview","sliders","slider","hueSlider","hueScope","opacitySlider","opacity","min","opacityScope","controlSection","section","hexAndChannelsGroup","hexOptions","onCalciteColorPickerHexInputChange","colorModeContainer","splitSection","slot","savedColorsSection","header","saved","savedColorsButtons","appearance","iconStart","kind","onClick","length","savedColor","tabIndex","ensureCompatibleMode","isAlphaCompatible","alphaMode","toAlphaMode","nonAlphaMode","toNonAlphaMode","HUE_LIMIT_CONSTRAINED","toValue","hexMode","includes","hasAlpha","HEXA","replace","string","needToInjectAlpha","model","values","colorObject","object","normalizeAlpha","getSliderCapSpacing","fillStyle","fillRect","whiteGradient","createLinearGradient","addColorStop","blackGradient","drawActiveColorFieldColor","setCanvasContextSize","devicePixelRatio","adjustedSliderDimensions","hsvColor","requestAnimationFrame","drawThumb","applyAlpha","startAngle","endAngle","PI","outlineWidth","beginPath","arc","fill","strokeStyle","lineWidth","stroke","pattern","createPattern","getCheckeredBackgroundPattern","globalCompositeOperation","drawActiveHueSliderColor","sliderBoundX","getSliderBoundX","gradient","hueSliderColorStopKeywords","offset","currentOffset","forEach","keyword","clearRect","drawSliderPath","startColor","midColor","endColor","drawActiveOpacitySliderColor","moveTo","lineTo","quadraticCurveTo","closePath","checkerPattern","document","createElement","patternContext","closeToEdge","closeToRangeEdge","remap","array","isAlpha","floor","push","SCOPE_SIZE","hexInput","opacityInput","colorPickerHexInputCss","CalciteColorPickerHexInputStyle0","ColorPickerHexInput","onHexInputBlur","hexInputNode","internalColor","willClearValue","isLonghand","isLonghandHex","onHexInputChange","isValidHex","formatHexForInternalInput","rgbToHex","onOpacityInputBlur","opacityInputNode","formatOpacityForInternalInput","nodeValue","normalized","preserveExistingAlpha","alphaHex","hexa","internalSetValue","onOpacityInputChange","onHexInput","hexInputValue","onInputKeyDown","altKey","ctrlKey","metaKey","isNudgeKey","previousNonNullValue","bump","nudgeRGBChannels","withModifiers","singleChar","validHexChar","hexChar","test","onHexInputPaste","clipboardData","getData","storeHexInputRef","storeOpacityInputRef","hexLabel","opacityInputValue","inputScale","maxLength","onCalciteInputTextChange","onCalciteInputTextInput","onCalciteInternalInputTextBlur","onPaste","prefixText","onCalciteInternalInputNumberBlur","focusElement","currentColor","nextColor","normalizedLonghand","changed","calciteColorPickerHexInputChange","amount","nudgedChannels","rgbChannels","nudgedRGBChannels","undefined","nudgedAlpha","noColorSwatch","checker","COLORS","borderLight","borderDark","checkerSquareSize","CHECKER_DIMENSIONS","squareSize","size","colorPickerSwatchCss","CalciteColorPickerSwatchStyle0","ColorPickerSwatch","isEmpty","classes","xmlns","renderSwatch","active","borderRadius","theme","getModeName","borderColor","commonSwatchProps","rx","Fragment","id","x1","x2","y1","y2","patternUnits"],"sources":["src/components/color-picker/color-picker.scss?tag=calcite-color-picker&encapsulation=shadow","src/components/color-picker/color-picker.tsx","src/components/color-picker-hex-input/resources.ts","src/components/color-picker-hex-input/color-picker-hex-input.scss?tag=calcite-color-picker-hex-input&encapsulation=shadow","src/components/color-picker-hex-input/color-picker-hex-input.tsx","src/components/color-picker-swatch/resources.ts","src/components/color-picker-swatch/color-picker-swatch.scss?tag=calcite-color-picker-swatch&encapsulation=shadow","src/components/color-picker-swatch/color-picker-swatch.tsx"],"sourcesContent":[":host {\n  @apply text-n2h inline-block font-normal;\n}\n\n@include disabled();\n\n:host([scale=\"s\"]) {\n  --calcite-color-picker-spacing: 8px;\n\n  .container {\n    inline-size: 160px;\n  }\n\n  .saved-colors {\n    @apply gap-1;\n    grid-template-columns: repeat(auto-fill, 20px);\n  }\n}\n\n:host([scale=\"m\"]) {\n  --calcite-color-picker-spacing: 12px;\n\n  .container {\n    inline-size: 272px;\n  }\n}\n\n:host([scale=\"l\"]) {\n  --calcite-color-picker-spacing: 16px;\n\n  @apply text-n1h;\n\n  .container {\n    inline-size: 464px;\n  }\n\n  .section {\n    &:first-of-type {\n      padding-block-start: var(--calcite-color-picker-spacing);\n    }\n  }\n\n  .saved-colors {\n    grid-template-columns: repeat(auto-fill, 32px);\n  }\n\n  .control-section {\n    @apply flex-nowrap items-baseline;\n  }\n\n  .control-section {\n    @apply flex-wrap;\n  }\n\n  .color-hex-options {\n    @apply flex\n      flex-shrink\n      flex-col\n      justify-around;\n  }\n\n  .color-mode-container {\n    flex-shrink: 3;\n  }\n}\n\n.container {\n  @apply bg-foreground-1;\n  display: inline-block;\n  border: 1px solid var(--calcite-color-border-1);\n}\n\n.control-and-scope {\n  @apply flex relative cursor-pointer touch-none;\n}\n\n.scope {\n  @apply text-n1\n    focus-base\n    absolute\n    z-default\n    rounded-full\n    bg-transparent\n    w-px\n    h-px\n    pointer-events-none;\n  &:focus {\n    @apply focus-outset;\n    outline-offset: 6px;\n  }\n}\n\n.hex-and-channels-group {\n  @apply w-full;\n}\n\n.hex-and-channels-group,\n.control-section {\n  @apply flex flex-row flex-wrap;\n}\n\n.section {\n  padding-block: 0 var(--calcite-color-picker-spacing);\n  padding-inline: var(--calcite-color-picker-spacing);\n\n  &:first-of-type {\n    padding-block-start: var(--calcite-color-picker-spacing);\n  }\n}\n\n.sliders {\n  @apply flex flex-col justify-between;\n  margin-inline-start: var(--calcite-color-picker-spacing);\n  gap: var(--calcite-spacing-xxs);\n}\n\n.preview-and-sliders {\n  @apply flex items-center;\n  padding: var(--calcite-color-picker-spacing);\n}\n\n.color-hex-options,\n.section--split {\n  flex-grow: 1;\n}\n\n.header {\n  @apply text-color-1\n    flex\n    items-center\n    justify-between;\n}\n\n.color-mode-container {\n  padding-block-start: var(--calcite-color-picker-spacing);\n}\n\n.channels {\n  @apply flex gap-y-0.5;\n}\n\n.channel {\n  &[data-channel-index=\"3\"] {\n    inline-size: 159px;\n  }\n}\n\n:host([scale=\"s\"]) {\n  .channels {\n    @apply flex-wrap;\n  }\n\n  .channel {\n    flex-basis: 30%;\n    flex-grow: 1;\n\n    &[data-channel-index=\"3\"] {\n      inline-size: unset;\n      margin-inline-start: unset;\n    }\n  }\n}\n\n:host([scale=\"l\"]) {\n  .channel {\n    &[data-channel-index=\"3\"] {\n      inline-size: 131px;\n    }\n  }\n}\n\n.saved-colors {\n  @apply grid gap-2;\n  padding-block-start: var(--calcite-color-picker-spacing);\n  grid-template-columns: repeat(auto-fill, 24px);\n}\n\n.saved-colors-buttons {\n  display: flex;\n}\n\n.saved-color {\n  @include focus-style-base();\n\n  cursor: pointer;\n\n  &:focus {\n    @include focus-style-outset();\n  }\n\n  &:hover {\n    transition: outline-color var(--calcite-internal-animation-timing-fast) ease-in-out;\n    outline: 2px solid var(--calcite-color-border-2);\n    outline-offset: 2px;\n  }\n}\n\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Listen,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport Color from \"color\";\nimport { throttle } from \"lodash-es\";\nimport { Direction, getElementDir, isPrimaryPointerButton } from \"../../utils/dom\";\nimport { Scale } from \"../interfaces\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { isActivationKey } from \"../../utils/key\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport {\n  connectLocalized,\n  disconnectLocalized,\n  LocalizedComponent,\n  NumberingSystem,\n} from \"../../utils/locale\";\nimport { clamp, closeToRangeEdge, remap } from \"../../utils/math\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport {\n  alphaCompatible,\n  alphaToOpacity,\n  colorEqual,\n  CSSColorMode,\n  Format,\n  getSliderWidth,\n  hexify,\n  normalizeAlpha,\n  normalizeColor,\n  normalizeHex,\n  opacityToAlpha,\n  parseMode,\n  SupportedMode,\n  toAlphaMode,\n  toNonAlphaMode,\n} from \"./utils\";\nimport {\n  CSS,\n  DEFAULT_COLOR,\n  DEFAULT_STORAGE_KEY_PREFIX,\n  DIMENSIONS,\n  HSV_LIMITS,\n  HUE_LIMIT_CONSTRAINED,\n  OPACITY_LIMITS,\n  RGB_LIMITS,\n  SCOPE_SIZE,\n} from \"./resources\";\nimport { Channels, ColorMode, ColorValue, HSLA, HSVA, InternalColor, RGBA } from \"./interfaces\";\nimport { ColorPickerMessages } from \"./assets/color-picker/t9n\";\n\nconst throttleFor60FpsInMs = 16;\n\n@Component({\n  tag: \"calcite-color-picker\",\n  styleUrl: \"color-picker.scss\",\n  shadow: {\n    delegatesFocus: true,\n  },\n  assetsDirs: [\"assets\"],\n})\nexport class ColorPicker\n  implements InteractiveComponent, LoadableComponent, LocalizedComponent, T9nComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Public properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, an empty color (`null`) will be allowed as a `value`.\n   *\n   * When `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.\n   *\n   * @deprecated Use `clearable` instead\n   */\n  @Prop({ reflect: true }) allowEmpty = false;\n\n  @Watch(\"allowEmpty\")\n  @Watch(\"clearable\")\n  handleAllowEmptyOrClearableChange(): void {\n    this.isClearable = this.clearable || this.allowEmpty;\n  }\n\n  /**\n   * When `true`, the component will allow updates to the color's alpha value.\n   */\n  @Prop() alphaChannel = false;\n\n  @Watch(\"alphaChannel\")\n  handleAlphaChannelChange(alphaChannel: boolean): void {\n    const { format } = this;\n\n    if (alphaChannel && format !== \"auto\" && !alphaCompatible(format)) {\n      console.warn(\n        `ignoring alphaChannel as the current format (${format}) does not support alpha`,\n      );\n      this.alphaChannel = false;\n    }\n  }\n\n  @Watch(\"alphaChannel\")\n  @Watch(\"dimensions\")\n  handleAlphaChannelDimensionsChange(): void {\n    this.effectiveSliderWidth = getSliderWidth(this.dimensions, this.alphaChannel);\n    this.drawColorControls();\n  }\n\n  /** When `true`, hides the RGB/HSV channel inputs. */\n  @Prop() channelsDisabled = false;\n\n  /**\n   * When `true`, an empty color (`null`) will be allowed as a `value`.\n   *\n   * When `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.\n   */\n  @Prop({ reflect: true }) clearable = false;\n\n  /**\n   * Internal prop for advanced use-cases.\n   *\n   * @internal\n   */\n  @Prop({ mutable: true }) color: InternalColor | null = DEFAULT_COLOR;\n\n  @Watch(\"color\")\n  handleColorChange(color: Color | null, oldColor: Color | null): void {\n    this.drawColorControls();\n    this.updateChannelsFromColor(color);\n    this.previousColor = oldColor;\n  }\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The format of `value`.\n   *\n   * When `\"auto\"`, the format will be inferred from `value` when set.\n   *\n   * @default \"auto\"\n   */\n  @Prop({ reflect: true }) format: Format = \"auto\";\n\n  @Watch(\"alphaChannel\")\n  @Watch(\"format\")\n  handleFormatOrAlphaChannelChange(): void {\n    this.setMode(this.format);\n    this.internalColorSet(this.color, false, \"internal\");\n  }\n\n  /**\n   * When `true`, hides the RGB/HSV channel inputs.\n   *\n   * @deprecated use `channelsDisabled` instead\n   */\n  @Prop({ reflect: true }) hideChannels = false;\n\n  /** When `true`, hides the hex input. */\n  @Prop() hexDisabled = false;\n\n  /**\n   * When `true`, hides the hex input.\n   *\n   * @deprecated use `hexDisabled` instead\n   */\n  @Prop({ reflect: true }) hideHex = false;\n\n  /**\n   * When `true`, hides the saved colors section.\n   *\n   * @deprecated use `savedDisabled` instead\n   */\n  @Prop({ reflect: true }) hideSaved = false;\n\n  /** When `true`, hides the saved colors section. */\n  @Prop({ reflect: true }) savedDisabled = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  @Watch(\"scale\")\n  handleScaleChange(scale: Scale = \"m\"): void {\n    this.updateDimensions(scale);\n    this.updateCanvasSize(\"all\");\n    this.drawColorControls();\n  }\n\n  /** Specifies the storage ID for colors. */\n  @Prop({ reflect: true }) storageId: string;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ColorPickerMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /** Specifies the Unicode numeral system used by the component for localization. */\n  @Prop({ reflect: true }) numberingSystem: NumberingSystem;\n\n  /**\n   * The component's value, where the value can be a CSS color string, or a RGB, HSL or HSV object.\n   *\n   * The type will be preserved as the color is updated.\n   *\n   * @default \"#007ac2\"\n   * @see [CSS Color](https://developer.mozilla.org/en-US/docs/Web/CSS/color)\n   * @see [ColorValue](https://github.com/Esri/calcite-design-system/blob/dev/src/components/color-picker/interfaces.ts#L10)\n   */\n  @Prop({ mutable: true }) value: ColorValue | null = normalizeHex(\n    hexify(DEFAULT_COLOR, this.alphaChannel),\n  );\n\n  @Watch(\"value\")\n  handleValueChange(value: ColorValue | null, oldValue: ColorValue | null): void {\n    const { isClearable, format } = this;\n    const checkMode = !isClearable || value;\n    let modeChanged = false;\n\n    if (checkMode) {\n      const nextMode = parseMode(value);\n\n      if (!nextMode || (format !== \"auto\" && nextMode !== format)) {\n        this.showIncompatibleColorWarning(value, format);\n        this.value = oldValue;\n        return;\n      }\n\n      modeChanged = this.mode !== nextMode;\n      this.setMode(nextMode, this.internalColorUpdateContext === null);\n    }\n\n    const dragging = this.activeCanvasInfo;\n\n    if (this.internalColorUpdateContext === \"initial\") {\n      return;\n    }\n\n    if (this.internalColorUpdateContext === \"user-interaction\") {\n      this.calciteColorPickerInput.emit();\n\n      if (!dragging) {\n        this.calciteColorPickerChange.emit();\n      }\n      return;\n    }\n\n    const color =\n      isClearable && !value\n        ? null\n        : Color(\n            value != null && typeof value === \"object\" && alphaCompatible(this.mode)\n              ? normalizeColor(value as RGBA | HSVA | HSLA)\n              : value,\n          );\n    const colorChanged = !colorEqual(color, this.color);\n\n    if (modeChanged || colorChanged) {\n      this.internalColorSet(\n        color,\n        this.alphaChannel && !(this.mode.endsWith(\"a\") || this.mode.endsWith(\"a-css\")),\n        \"internal\",\n      );\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Internal State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteColorPickerElement;\n\n  private activeCanvasInfo: {\n    context: CanvasRenderingContext2D;\n    bounds: DOMRect;\n  };\n\n  private get baseColorFieldColor(): Color {\n    return this.color || this.previousColor || DEFAULT_COLOR;\n  }\n\n  private checkerPattern: HTMLCanvasElement;\n\n  private colorFieldRenderingContext: CanvasRenderingContext2D;\n\n  private colorFieldScopeNode: HTMLDivElement;\n\n  private effectiveSliderWidth: number;\n\n  private hueSliderRenderingContext: CanvasRenderingContext2D;\n\n  private hueScopeNode: HTMLDivElement;\n\n  private internalColorUpdateContext: \"internal\" | \"initial\" | \"user-interaction\" | null = null;\n\n  private isClearable: boolean;\n\n  private mode: SupportedMode = CSSColorMode.HEX;\n\n  private opacityScopeNode: HTMLDivElement;\n\n  private opacitySliderRenderingContext: CanvasRenderingContext2D;\n\n  private previousColor: InternalColor | null;\n\n  private shiftKeyChannelAdjustment = 0;\n\n  @State() channelMode: ColorMode = \"rgb\";\n\n  @State() channels: Channels = this.toChannels(DEFAULT_COLOR);\n\n  @State() defaultMessages: ColorPickerMessages;\n\n  @State() dimensions = DIMENSIONS.m;\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ColorPickerMessages;\n\n  @State() savedColors: string[] = [];\n\n  @State() colorFieldScopeTop: number;\n\n  @State() colorFieldScopeLeft: number;\n\n  @State() hueScopeLeft: number;\n\n  @State() opacityScopeLeft: number;\n\n  @State() scopeOrientation: \"vertical\" | \"horizontal\";\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the color value has changed.\n   */\n  @Event({ cancelable: false }) calciteColorPickerChange: EventEmitter<void>;\n\n  /**\n   * Fires as the color value changes.\n   *\n   * Similar to the `calciteColorPickerChange` event with the exception of dragging. When dragging the color field or hue slider thumb, this event fires as the thumb is moved.\n   */\n  @Event({ cancelable: false }) calciteColorPickerInput: EventEmitter<void>;\n\n  private handleTabActivate = (event: Event): void => {\n    this.channelMode = (event.currentTarget as HTMLElement).getAttribute(\n      \"data-color-mode\",\n    ) as ColorMode;\n\n    this.updateChannelsFromColor(this.color);\n  };\n\n  private handleColorFieldScopeKeyDown = (event: KeyboardEvent): void => {\n    const { key } = event;\n    const arrowKeyToXYOffset = {\n      ArrowUp: { x: 0, y: -10 },\n      ArrowRight: { x: 10, y: 0 },\n      ArrowDown: { x: 0, y: 10 },\n      ArrowLeft: { x: -10, y: 0 },\n    };\n\n    if (arrowKeyToXYOffset[key]) {\n      event.preventDefault();\n      this.scopeOrientation = key === \"ArrowDown\" || key === \"ArrowUp\" ? \"vertical\" : \"horizontal\";\n      this.captureColorFieldColor(\n        this.colorFieldScopeLeft + arrowKeyToXYOffset[key].x || 0,\n        this.colorFieldScopeTop + arrowKeyToXYOffset[key].y || 0,\n        false,\n      );\n    }\n  };\n\n  private handleHueScopeKeyDown = (event: KeyboardEvent): void => {\n    const modifier = event.shiftKey ? 10 : 1;\n    const { key } = event;\n    const arrowKeyToXOffset = {\n      ArrowUp: 1,\n      ArrowRight: 1,\n      ArrowDown: -1,\n      ArrowLeft: -1,\n    };\n\n    if (arrowKeyToXOffset[key]) {\n      event.preventDefault();\n      const delta = arrowKeyToXOffset[key] * modifier;\n      const hue = this.baseColorFieldColor.hue();\n      const color = this.baseColorFieldColor.hue(hue + delta);\n      this.internalColorSet(color, false);\n    }\n  };\n\n  private handleHexInputChange = (event: Event): void => {\n    event.stopPropagation();\n    const { isClearable, color } = this;\n    const input = event.target as HTMLCalciteColorPickerHexInputElement;\n    const hex = input.value;\n\n    if (isClearable && !hex) {\n      this.internalColorSet(null);\n      return;\n    }\n\n    const normalizedHex = color && normalizeHex(hexify(color, alphaCompatible(this.mode)));\n\n    if (hex !== normalizedHex) {\n      this.internalColorSet(Color(hex));\n    }\n  };\n\n  private handleSavedColorSelect = (event: Event): void => {\n    const swatch = event.currentTarget as HTMLCalciteColorPickerSwatchElement;\n    this.internalColorSet(Color(swatch.color));\n  };\n\n  private handleChannelInput = (event: CustomEvent): void => {\n    const input = event.currentTarget as HTMLCalciteInputNumberElement;\n    const channelIndex = Number(input.getAttribute(\"data-channel-index\"));\n    const isAlphaChannel = channelIndex === 3;\n\n    const limit = isAlphaChannel\n      ? OPACITY_LIMITS.max\n      : this.channelMode === \"rgb\"\n        ? RGB_LIMITS[Object.keys(RGB_LIMITS)[channelIndex]]\n        : HSV_LIMITS[Object.keys(HSV_LIMITS)[channelIndex]];\n\n    let inputValue: string;\n\n    if (this.isClearable && !input.value) {\n      inputValue = \"\";\n    } else {\n      const value = Number(input.value);\n      const adjustedValue = value + this.shiftKeyChannelAdjustment;\n      const clamped = clamp(adjustedValue, 0, limit);\n\n      inputValue = clamped.toString();\n    }\n\n    input.value = inputValue;\n\n    if (inputValue !== \"\" && this.shiftKeyChannelAdjustment !== 0) {\n      // we treat nudging as a change event since the input won't emit when modifying the value directly\n      this.handleChannelChange(event);\n    }\n  };\n\n  // using @Listen as a workaround for VDOM listener not firing\n  @Listen(\"keydown\", { capture: true })\n  @Listen(\"keyup\", { capture: true })\n  protected handleChannelKeyUpOrDown(event: KeyboardEvent): void {\n    this.shiftKeyChannelAdjustment = 0;\n    const { key } = event;\n\n    if (\n      (key !== \"ArrowUp\" && key !== \"ArrowDown\") ||\n      !event.composedPath().some((node: HTMLElement) => node.classList?.contains(CSS.channel))\n    ) {\n      return;\n    }\n\n    const { shiftKey } = event;\n    event.preventDefault();\n\n    if (!this.color) {\n      this.internalColorSet(this.previousColor);\n      event.stopPropagation();\n      return;\n    }\n\n    // this gets applied to the input's up/down arrow increment/decrement\n    const complementaryBump = 9;\n\n    this.shiftKeyChannelAdjustment =\n      key === \"ArrowUp\" && shiftKey\n        ? complementaryBump\n        : key === \"ArrowDown\" && shiftKey\n          ? -complementaryBump\n          : 0;\n  }\n\n  private handleChannelChange = (event: CustomEvent): void => {\n    const input = event.currentTarget as HTMLCalciteInputNumberElement;\n    const channelIndex = Number(input.getAttribute(\"data-channel-index\"));\n    const channels = [...this.channels] as this[\"channels\"];\n\n    const shouldClearChannels = this.isClearable && !input.value;\n\n    if (shouldClearChannels) {\n      this.channels = [null, null, null, null];\n      this.internalColorSet(null);\n      return;\n    }\n\n    const isAlphaChannel = channelIndex === 3;\n    const value = Number(input.value);\n\n    channels[channelIndex] = isAlphaChannel ? opacityToAlpha(value) : value;\n    this.updateColorFromChannels(channels);\n  };\n\n  private handleSavedColorKeyDown = (event: KeyboardEvent): void => {\n    if (isActivationKey(event.key)) {\n      event.preventDefault();\n      this.handleSavedColorSelect(event);\n    }\n  };\n\n  private handleColorFieldPointerDown = (event: PointerEvent): void => {\n    if (!isPrimaryPointerButton(event)) {\n      return;\n    }\n\n    const { offsetX, offsetY } = event;\n\n    window.addEventListener(\"pointermove\", this.globalPointerMoveHandler);\n    window.addEventListener(\"pointerup\", this.globalPointerUpHandler, { once: true });\n\n    this.activeCanvasInfo = {\n      context: this.colorFieldRenderingContext,\n      bounds: this.colorFieldRenderingContext.canvas.getBoundingClientRect(),\n    };\n    this.captureColorFieldColor(offsetX, offsetY);\n    this.colorFieldScopeNode.focus();\n  };\n\n  private handleHueSliderPointerDown = (event: PointerEvent): void => {\n    if (!isPrimaryPointerButton(event)) {\n      return;\n    }\n\n    const { offsetX } = event;\n\n    window.addEventListener(\"pointermove\", this.globalPointerMoveHandler);\n    window.addEventListener(\"pointerup\", this.globalPointerUpHandler, { once: true });\n\n    this.activeCanvasInfo = {\n      context: this.hueSliderRenderingContext,\n      bounds: this.hueSliderRenderingContext.canvas.getBoundingClientRect(),\n    };\n    this.captureHueSliderColor(offsetX);\n    this.hueScopeNode.focus();\n  };\n\n  private handleOpacitySliderPointerDown = (event: PointerEvent): void => {\n    if (!isPrimaryPointerButton(event)) {\n      return;\n    }\n\n    const { offsetX } = event;\n\n    window.addEventListener(\"pointermove\", this.globalPointerMoveHandler);\n    window.addEventListener(\"pointerup\", this.globalPointerUpHandler, { once: true });\n\n    this.activeCanvasInfo = {\n      context: this.opacitySliderRenderingContext,\n      bounds: this.opacitySliderRenderingContext.canvas.getBoundingClientRect(),\n    };\n    this.captureOpacitySliderValue(offsetX);\n    this.opacityScopeNode.focus();\n  };\n\n  private globalPointerUpHandler = (event: PointerEvent): void => {\n    if (!isPrimaryPointerButton(event)) {\n      return;\n    }\n\n    const previouslyDragging = this.activeCanvasInfo;\n    this.activeCanvasInfo = null;\n    this.drawColorControls();\n\n    if (previouslyDragging) {\n      this.calciteColorPickerChange.emit();\n    }\n  };\n\n  private globalPointerMoveHandler = (event: PointerEvent): void => {\n    const { activeCanvasInfo, el } = this;\n\n    if (!el.isConnected || !activeCanvasInfo) {\n      return;\n    }\n\n    const { context, bounds } = activeCanvasInfo;\n\n    let samplingX: number;\n    let samplingY: number;\n\n    const { clientX, clientY } = event;\n\n    if (context.canvas.matches(\":hover\")) {\n      samplingX = clientX - bounds.x;\n      samplingY = clientY - bounds.y;\n    } else {\n      // snap x and y to the closest edge\n\n      if (clientX < bounds.x + bounds.width && clientX > bounds.x) {\n        samplingX = clientX - bounds.x;\n      } else if (clientX < bounds.x) {\n        samplingX = 0;\n      } else {\n        samplingX = bounds.width;\n      }\n\n      if (clientY < bounds.y + bounds.height && clientY > bounds.y) {\n        samplingY = clientY - bounds.y;\n      } else if (clientY < bounds.y) {\n        samplingY = 0;\n      } else {\n        samplingY = bounds.height;\n      }\n    }\n\n    if (context === this.colorFieldRenderingContext) {\n      this.captureColorFieldColor(samplingX, samplingY, false);\n    } else if (context === this.hueSliderRenderingContext) {\n      this.captureHueSliderColor(samplingX);\n    } else if (context === this.opacitySliderRenderingContext) {\n      this.captureOpacitySliderValue(samplingX);\n    }\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component's first focusable element. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    this.el.focus();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n\n    this.handleAllowEmptyOrClearableChange();\n    this.handleAlphaChannelDimensionsChange();\n\n    const { isClearable, color, format, value } = this;\n    const willSetNoColor = isClearable && !value;\n    const parsedMode = parseMode(value);\n    const valueIsCompatible =\n      willSetNoColor || (format === \"auto\" && parsedMode) || format === parsedMode;\n    const initialColor = willSetNoColor ? null : valueIsCompatible ? Color(value) : color;\n\n    if (!valueIsCompatible) {\n      this.showIncompatibleColorWarning(value, format);\n    }\n    this.setMode(format, false);\n    this.internalColorSet(initialColor, false, \"initial\");\n\n    this.updateDimensions(this.scale);\n\n    const storageKey = `${DEFAULT_STORAGE_KEY_PREFIX}${this.storageId}`;\n\n    if (this.storageId && localStorage.getItem(storageKey)) {\n      this.savedColors = JSON.parse(localStorage.getItem(storageKey));\n    }\n\n    await setUpMessages(this);\n  }\n\n  connectedCallback(): void {\n    connectInteractive(this);\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback(): void {\n    window.removeEventListener(\"pointermove\", this.globalPointerMoveHandler);\n    window.removeEventListener(\"pointerup\", this.globalPointerUpHandler);\n    disconnectInteractive(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n\n  render(): VNode {\n    const {\n      channelsDisabled,\n      color,\n      colorFieldScopeLeft,\n      colorFieldScopeTop,\n      dimensions: {\n        thumb: { radius: thumbRadius },\n      },\n      hexDisabled,\n      hideChannels,\n      hideHex,\n      hideSaved,\n      hueScopeLeft,\n      messages,\n      alphaChannel,\n      opacityScopeLeft,\n      savedColors,\n      savedDisabled,\n      scale,\n      scopeOrientation,\n    } = this;\n\n    const sliderWidth = this.effectiveSliderWidth;\n    const selectedColorInHex = color ? hexify(color, alphaChannel) : null;\n    const hueTop = thumbRadius;\n    const hueLeft = hueScopeLeft ?? (sliderWidth * DEFAULT_COLOR.hue()) / HSV_LIMITS.h;\n    const opacityTop = thumbRadius;\n    const opacityLeft =\n      opacityScopeLeft ??\n      (sliderWidth * alphaToOpacity(DEFAULT_COLOR.alpha())) / OPACITY_LIMITS.max;\n    const noColor = color === null;\n    const vertical = scopeOrientation === \"vertical\";\n    const noHex = hexDisabled || hideHex;\n    const noChannels = channelsDisabled || hideChannels;\n    const noSaved = savedDisabled || hideSaved;\n    const [adjustedColorFieldScopeLeft, adjustedColorFieldScopeTop] = this.getAdjustedScopePosition(\n      colorFieldScopeLeft,\n      colorFieldScopeTop,\n    );\n    const [adjustedHueScopeLeft, adjustedHueScopeTop] = this.getAdjustedScopePosition(\n      hueLeft,\n      hueTop,\n    );\n    const [adjustedOpacityScopeLeft, adjustedOpacityScopeTop] = this.getAdjustedScopePosition(\n      opacityLeft,\n      opacityTop,\n    );\n\n    return (\n      <InteractiveContainer disabled={this.disabled}>\n        <div class={CSS.container}>\n          <div class={CSS.controlAndScope}>\n            <canvas\n              class={CSS.colorField}\n              onPointerDown={this.handleColorFieldPointerDown}\n              ref={this.initColorField}\n            />\n            <div\n              aria-label={vertical ? messages.value : messages.saturation}\n              aria-valuemax={vertical ? HSV_LIMITS.v : HSV_LIMITS.s}\n              aria-valuemin=\"0\"\n              aria-valuenow={(vertical ? color?.saturationv() : color?.value()) || \"0\"}\n              class={{ [CSS.scope]: true, [CSS.colorFieldScope]: true }}\n              onKeyDown={this.handleColorFieldScopeKeyDown}\n              ref={this.storeColorFieldScope}\n              role=\"slider\"\n              style={{\n                top: `${adjustedColorFieldScopeTop || 0}px`,\n                left: `${adjustedColorFieldScopeLeft || 0}px`,\n              }}\n              tabindex=\"0\"\n            />\n          </div>\n          <div class={CSS.previewAndSliders}>\n            <calcite-color-picker-swatch\n              class={CSS.preview}\n              color={selectedColorInHex}\n              scale={this.alphaChannel ? \"l\" : this.scale}\n            />\n            <div class={CSS.sliders}>\n              <div class={CSS.controlAndScope}>\n                <canvas\n                  class={{ [CSS.slider]: true, [CSS.hueSlider]: true }}\n                  onPointerDown={this.handleHueSliderPointerDown}\n                  ref={this.initHueSlider}\n                />\n                <div\n                  aria-label={messages.hue}\n                  aria-valuemax={HSV_LIMITS.h}\n                  aria-valuemin=\"0\"\n                  aria-valuenow={color?.round().hue() || DEFAULT_COLOR.round().hue()}\n                  class={{ [CSS.scope]: true, [CSS.hueScope]: true }}\n                  onKeyDown={this.handleHueScopeKeyDown}\n                  ref={this.storeHueScope}\n                  role=\"slider\"\n                  style={{\n                    top: `${adjustedHueScopeTop}px`,\n                    left: `${adjustedHueScopeLeft}px`,\n                  }}\n                  tabindex=\"0\"\n                />\n              </div>\n              {alphaChannel ? (\n                <div class={CSS.controlAndScope}>\n                  <canvas\n                    class={{ [CSS.slider]: true, [CSS.opacitySlider]: true }}\n                    onPointerDown={this.handleOpacitySliderPointerDown}\n                    ref={this.initOpacitySlider}\n                  />\n                  <div\n                    aria-label={messages.opacity}\n                    aria-valuemax={OPACITY_LIMITS.max}\n                    aria-valuemin={OPACITY_LIMITS.min}\n                    aria-valuenow={(color || DEFAULT_COLOR).round().alpha()}\n                    class={{ [CSS.scope]: true, [CSS.opacityScope]: true }}\n                    onKeyDown={this.handleOpacityScopeKeyDown}\n                    ref={this.storeOpacityScope}\n                    role=\"slider\"\n                    style={{\n                      top: `${adjustedOpacityScopeTop}px`,\n                      left: `${adjustedOpacityScopeLeft}px`,\n                    }}\n                    tabindex=\"0\"\n                  />\n                </div>\n              ) : null}\n            </div>\n          </div>\n          {noHex && noChannels ? null : (\n            <div\n              class={{\n                [CSS.controlSection]: true,\n                [CSS.section]: true,\n              }}\n            >\n              <div class={CSS.hexAndChannelsGroup}>\n                {noHex ? null : (\n                  <div class={CSS.hexOptions}>\n                    <calcite-color-picker-hex-input\n                      allowEmpty={this.isClearable}\n                      alphaChannel={alphaChannel}\n                      class={CSS.control}\n                      messages={messages}\n                      numberingSystem={this.numberingSystem}\n                      onCalciteColorPickerHexInputChange={this.handleHexInputChange}\n                      scale={scale}\n                      value={selectedColorInHex}\n                    />\n                  </div>\n                )}\n                {noChannels ? null : (\n                  <calcite-tabs\n                    class={{\n                      [CSS.colorModeContainer]: true,\n                      [CSS.splitSection]: true,\n                    }}\n                    scale={scale === \"l\" ? \"m\" : \"s\"}\n                  >\n                    <calcite-tab-nav slot=\"title-group\">\n                      {this.renderChannelsTabTitle(\"rgb\")}\n                      {this.renderChannelsTabTitle(\"hsv\")}\n                    </calcite-tab-nav>\n                    {this.renderChannelsTab(\"rgb\")}\n                    {this.renderChannelsTab(\"hsv\")}\n                  </calcite-tabs>\n                )}\n              </div>\n            </div>\n          )}\n          {noSaved ? null : (\n            <div class={{ [CSS.savedColorsSection]: true, [CSS.section]: true }}>\n              <div class={CSS.header}>\n                <label>{messages.saved}</label>\n                <div class={CSS.savedColorsButtons}>\n                  <calcite-button\n                    appearance=\"transparent\"\n                    class={CSS.deleteColor}\n                    disabled={noColor}\n                    iconStart=\"minus\"\n                    kind=\"neutral\"\n                    label={messages.deleteColor}\n                    onClick={this.deleteColor}\n                    scale={scale}\n                    type=\"button\"\n                  />\n                  <calcite-button\n                    appearance=\"transparent\"\n                    class={CSS.saveColor}\n                    disabled={noColor}\n                    iconStart=\"plus\"\n                    kind=\"neutral\"\n                    label={messages.saveColor}\n                    onClick={this.saveColor}\n                    scale={scale}\n                    type=\"button\"\n                  />\n                </div>\n              </div>\n              {savedColors.length > 0 ? (\n                <div class={CSS.savedColors}>\n                  {[\n                    ...savedColors.map((color) => (\n                      <calcite-color-picker-swatch\n                        class={CSS.savedColor}\n                        color={color}\n                        key={color}\n                        onClick={this.handleSavedColorSelect}\n                        onKeyDown={this.handleSavedColorKeyDown}\n                        scale={scale}\n                        tabIndex={0}\n                      />\n                    )),\n                  ]}\n                </div>\n              ) : null}\n            </div>\n          )}\n        </div>\n      </InteractiveContainer>\n    );\n  }\n\n  private storeColorFieldScope = (node: HTMLDivElement): void => {\n    this.colorFieldScopeNode = node;\n  };\n\n  private storeHueScope = (node: HTMLDivElement): void => {\n    this.hueScopeNode = node;\n  };\n\n  private renderChannelsTabTitle = (channelMode: this[\"channelMode\"]): VNode => {\n    const { channelMode: activeChannelMode, messages } = this;\n    const selected = channelMode === activeChannelMode;\n    const label = channelMode === \"rgb\" ? messages.rgb : messages.hsv;\n\n    return (\n      <calcite-tab-title\n        class={CSS.colorMode}\n        data-color-mode={channelMode}\n        key={channelMode}\n        onCalciteTabsActivate={this.handleTabActivate}\n        selected={selected}\n      >\n        {label}\n      </calcite-tab-title>\n    );\n  };\n\n  private renderChannelsTab = (channelMode: this[\"channelMode\"]): VNode => {\n    const { isClearable, channelMode: activeChannelMode, channels, messages, alphaChannel } = this;\n    const selected = channelMode === activeChannelMode;\n    const isRgb = channelMode === \"rgb\";\n    const channelAriaLabels = isRgb\n      ? [messages.red, messages.green, messages.blue]\n      : [messages.hue, messages.saturation, messages.value];\n    const direction = getElementDir(this.el);\n    const channelsToRender = alphaChannel ? channels : channels.slice(0, 3);\n\n    return (\n      <calcite-tab class={CSS.control} key={channelMode} selected={selected}>\n        {/* channel order should not be mirrored */}\n        <div class={CSS.channels} dir=\"ltr\">\n          {channelsToRender.map((channelValue, index) => {\n            const isAlphaChannel = index === 3;\n\n            if (isAlphaChannel) {\n              channelValue =\n                isClearable && !channelValue ? channelValue : alphaToOpacity(channelValue);\n            }\n\n            /* the channel container is ltr, so we apply the host's direction */\n            return this.renderChannel(\n              channelValue,\n              index,\n              channelAriaLabels[index],\n              direction,\n              isAlphaChannel ? \"%\" : \"\",\n            );\n          })}\n        </div>\n      </calcite-tab>\n    );\n  };\n\n  private renderChannel = (\n    value: number | null,\n    index: number,\n    ariaLabel: string,\n    direction: Direction,\n    suffix?: string,\n  ): VNode => {\n    return (\n      <calcite-input-number\n        class={CSS.channel}\n        data-channel-index={index}\n        dir={direction}\n        key={index}\n        label={ariaLabel}\n        lang={this.effectiveLocale}\n        numberButtonType=\"none\"\n        numberingSystem={this.numberingSystem}\n        onCalciteInputNumberChange={this.handleChannelChange}\n        onCalciteInputNumberInput={this.handleChannelInput}\n        onKeyDown={this.handleKeyDown}\n        scale={this.scale === \"l\" ? \"m\" : \"s\"}\n        // workaround to ensure input borders overlap as desired\n        // this is because the build transforms margin-left to its\n        // logical-prop, which is undesired as channels are always ltr\n        style={{\n          marginLeft:\n            index > 0 && !(this.scale === \"s\" && this.alphaChannel && index === 3) ? \"-1px\" : \"\",\n        }}\n        suffixText={suffix}\n        value={value?.toString()}\n      />\n    );\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  handleKeyDown(event: KeyboardEvent): void {\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n    }\n  }\n\n  private showIncompatibleColorWarning(value: ColorValue, format: Format): void {\n    console.warn(\n      `ignoring color value (${value}) as it is not compatible with the current format (${format})`,\n    );\n  }\n\n  private setMode(format: ColorPicker[\"format\"], warn = true): void {\n    const mode = format === \"auto\" ? this.mode : format;\n    this.mode = this.ensureCompatibleMode(mode, warn);\n  }\n\n  private ensureCompatibleMode(mode: SupportedMode, warn): SupportedMode {\n    const { alphaChannel } = this;\n    const isAlphaCompatible = alphaCompatible(mode);\n\n    if (alphaChannel && !isAlphaCompatible) {\n      const alphaMode = toAlphaMode(mode);\n\n      if (warn) {\n        console.warn(\n          `setting format to (${alphaMode}) as the provided one (${mode}) does not support alpha`,\n        );\n      }\n\n      return alphaMode;\n    }\n\n    if (!alphaChannel && isAlphaCompatible) {\n      const nonAlphaMode = toNonAlphaMode(mode);\n\n      if (warn) {\n        console.warn(\n          `setting format to (${nonAlphaMode}) as the provided one (${mode}) does not support alpha`,\n        );\n      }\n\n      return nonAlphaMode;\n    }\n\n    return mode;\n  }\n\n  private captureHueSliderColor(x: number): void {\n    const hue = (HUE_LIMIT_CONSTRAINED / this.effectiveSliderWidth) * x;\n\n    this.internalColorSet(this.baseColorFieldColor.hue(hue), false);\n  }\n\n  private captureOpacitySliderValue(x: number): void {\n    const alpha = opacityToAlpha((OPACITY_LIMITS.max / this.effectiveSliderWidth) * x);\n\n    this.internalColorSet(this.baseColorFieldColor.alpha(alpha), false);\n  }\n\n  private internalColorSet(\n    color: Color | null,\n    skipEqual = true,\n    context: ColorPicker[\"internalColorUpdateContext\"] = \"user-interaction\",\n  ): void {\n    if (skipEqual && colorEqual(color, this.color)) {\n      return;\n    }\n\n    this.internalColorUpdateContext = context;\n    this.color = color;\n    this.value = this.toValue(color);\n    this.internalColorUpdateContext = null;\n  }\n\n  private toValue(color: Color | null, format: SupportedMode = this.mode): ColorValue | null {\n    if (!color) {\n      return null;\n    }\n\n    const hexMode = \"hex\";\n\n    if (format.includes(hexMode)) {\n      const hasAlpha = format === CSSColorMode.HEXA;\n      return normalizeHex(hexify(color.round(), hasAlpha), hasAlpha);\n    }\n\n    if (format.includes(\"-css\")) {\n      const value = color[format.replace(\"-css\", \"\").replace(\"a\", \"\")]().round().string();\n\n      // Color omits alpha values when alpha is 1\n      const needToInjectAlpha =\n        (format.endsWith(\"a\") || format.endsWith(\"a-css\")) && color.alpha() === 1;\n      if (needToInjectAlpha) {\n        const model = value.slice(0, 3);\n        const values = value.slice(4, -1);\n        return `${model}a(${values}, ${color.alpha()})`;\n      }\n\n      return value;\n    }\n\n    const colorObject =\n      /* Color() does not support hsva, hsla nor rgba, so we use the non-alpha mode */\n      color[toNonAlphaMode(format)]().round().object();\n\n    if (format.endsWith(\"a\")) {\n      return normalizeAlpha(colorObject);\n    }\n\n    return colorObject;\n  }\n\n  private getSliderCapSpacing(): number {\n    const {\n      dimensions: {\n        slider: { height },\n        thumb: { radius },\n      },\n    } = this;\n\n    return radius * 2 - height;\n  }\n\n  private updateDimensions(scale: Scale = \"m\"): void {\n    this.dimensions = DIMENSIONS[scale];\n  }\n\n  private deleteColor = (): void => {\n    const colorToDelete = hexify(this.color, this.alphaChannel);\n    const inStorage = this.savedColors.indexOf(colorToDelete) > -1;\n\n    if (!inStorage) {\n      return;\n    }\n\n    const savedColors = this.savedColors.filter((color) => color !== colorToDelete);\n\n    this.savedColors = savedColors;\n\n    const storageKey = `${DEFAULT_STORAGE_KEY_PREFIX}${this.storageId}`;\n\n    if (this.storageId) {\n      localStorage.setItem(storageKey, JSON.stringify(savedColors));\n    }\n  };\n\n  private saveColor = (): void => {\n    const colorToSave = hexify(this.color, this.alphaChannel);\n    const alreadySaved = this.savedColors.indexOf(colorToSave) > -1;\n\n    if (alreadySaved) {\n      return;\n    }\n\n    const savedColors = [...this.savedColors, colorToSave];\n\n    this.savedColors = savedColors;\n\n    const storageKey = `${DEFAULT_STORAGE_KEY_PREFIX}${this.storageId}`;\n\n    if (this.storageId) {\n      localStorage.setItem(storageKey, JSON.stringify(savedColors));\n    }\n  };\n\n  private drawColorControls = throttle(\n    (type: \"all\" | \"color-field\" | \"hue-slider\" | \"opacity-slider\" = \"all\"): void => {\n      if ((type === \"all\" || type === \"color-field\") && this.colorFieldRenderingContext) {\n        this.drawColorField();\n      }\n\n      if ((type === \"all\" || type === \"hue-slider\") && this.hueSliderRenderingContext) {\n        this.drawHueSlider();\n      }\n\n      if (\n        this.alphaChannel &&\n        (type === \"all\" || type === \"opacity-slider\") &&\n        this.opacitySliderRenderingContext\n      ) {\n        this.drawOpacitySlider();\n      }\n    },\n    throttleFor60FpsInMs,\n  );\n\n  private drawColorField(): void {\n    const context = this.colorFieldRenderingContext;\n    const {\n      dimensions: {\n        colorField: { height, width },\n      },\n    } = this;\n\n    context.fillStyle = this.baseColorFieldColor\n      .hsv()\n      .saturationv(100)\n      .value(100)\n      .alpha(1)\n      .string();\n    context.fillRect(0, 0, width, height);\n\n    const whiteGradient = context.createLinearGradient(0, 0, width, 0);\n    whiteGradient.addColorStop(0, \"rgba(255,255,255,1)\");\n    whiteGradient.addColorStop(1, \"rgba(255,255,255,0)\");\n    context.fillStyle = whiteGradient;\n    context.fillRect(0, 0, width, height);\n\n    const blackGradient = context.createLinearGradient(0, 0, 0, height);\n    blackGradient.addColorStop(0, \"rgba(0,0,0,0)\");\n    blackGradient.addColorStop(1, \"rgba(0,0,0,1)\");\n    context.fillStyle = blackGradient;\n    context.fillRect(0, 0, width, height);\n\n    this.drawActiveColorFieldColor();\n  }\n\n  private setCanvasContextSize(\n    canvas: HTMLCanvasElement,\n    { height, width }: { height: number; width: number },\n  ): void {\n    if (!canvas) {\n      return;\n    }\n\n    const devicePixelRatio = window.devicePixelRatio || 1;\n\n    canvas.width = width * devicePixelRatio;\n    canvas.height = height * devicePixelRatio;\n    canvas.style.height = `${height}px`;\n    canvas.style.width = `${width}px`;\n\n    const context = canvas.getContext(\"2d\");\n    context.scale(devicePixelRatio, devicePixelRatio);\n  }\n\n  private captureColorFieldColor = (x: number, y: number, skipEqual = true): void => {\n    const {\n      dimensions: {\n        colorField: { height, width },\n      },\n    } = this;\n    const saturation = Math.round((HSV_LIMITS.s / width) * x);\n    const value = Math.round((HSV_LIMITS.v / height) * (height - y));\n\n    this.internalColorSet(\n      this.baseColorFieldColor.hsv().saturationv(saturation).value(value),\n      skipEqual,\n    );\n  };\n\n  private initColorField = (canvas: HTMLCanvasElement): void => {\n    this.colorFieldRenderingContext = canvas.getContext(\"2d\");\n    this.updateCanvasSize(\"color-field\");\n    this.drawColorControls();\n  };\n\n  private initHueSlider = (canvas: HTMLCanvasElement): void => {\n    this.hueSliderRenderingContext = canvas.getContext(\"2d\");\n    this.updateCanvasSize(\"hue-slider\");\n    this.drawHueSlider();\n  };\n\n  private initOpacitySlider = (canvas: HTMLCanvasElement): void => {\n    if (!canvas) {\n      return;\n    }\n\n    this.opacitySliderRenderingContext = canvas.getContext(\"2d\");\n    this.updateCanvasSize(\"opacity-slider\");\n    this.drawOpacitySlider();\n  };\n\n  private updateCanvasSize(\n    context: \"all\" | \"color-field\" | \"hue-slider\" | \"opacity-slider\" = \"all\",\n  ): void {\n    const { dimensions } = this;\n\n    if (context === \"all\" || context === \"color-field\") {\n      this.setCanvasContextSize(this.colorFieldRenderingContext?.canvas, dimensions.colorField);\n    }\n\n    const adjustedSliderDimensions = {\n      width: this.effectiveSliderWidth,\n      height:\n        dimensions.slider.height + (dimensions.thumb.radius - dimensions.slider.height / 2) * 2,\n    };\n\n    if (context === \"all\" || context === \"hue-slider\") {\n      this.setCanvasContextSize(this.hueSliderRenderingContext?.canvas, adjustedSliderDimensions);\n    }\n\n    if (context === \"all\" || context === \"opacity-slider\") {\n      this.setCanvasContextSize(\n        this.opacitySliderRenderingContext?.canvas,\n        adjustedSliderDimensions,\n      );\n    }\n  }\n\n  private drawActiveColorFieldColor(): void {\n    const { color } = this;\n\n    if (!color) {\n      return;\n    }\n\n    const hsvColor = color.hsv();\n\n    const {\n      dimensions: {\n        colorField: { height, width },\n        thumb: { radius },\n      },\n    } = this;\n\n    const x = hsvColor.saturationv() / (HSV_LIMITS.s / width);\n    const y = height - hsvColor.value() / (HSV_LIMITS.v / height);\n\n    requestAnimationFrame(() => {\n      this.colorFieldScopeLeft = x;\n      this.colorFieldScopeTop = y;\n    });\n\n    this.drawThumb(this.colorFieldRenderingContext, radius, x, y, hsvColor, false);\n  }\n\n  private drawThumb(\n    context: CanvasRenderingContext2D,\n    radius: number,\n    x: number,\n    y: number,\n    color: Color,\n    applyAlpha: boolean,\n  ): void {\n    const startAngle = 0;\n    const endAngle = 2 * Math.PI;\n    const outlineWidth = 1;\n\n    context.beginPath();\n    context.arc(x, y, radius, startAngle, endAngle);\n    context.fillStyle = \"#fff\";\n    context.fill();\n\n    context.strokeStyle = \"rgba(0,0,0,0.3)\";\n    context.lineWidth = outlineWidth;\n    context.stroke();\n\n    if (applyAlpha && color.alpha() < 1) {\n      const pattern = context.createPattern(this.getCheckeredBackgroundPattern(), \"repeat\");\n      context.beginPath();\n      context.arc(x, y, radius - 3, startAngle, endAngle);\n      context.fillStyle = pattern;\n      context.fill();\n    }\n\n    context.globalCompositeOperation = \"source-atop\";\n\n    context.beginPath();\n    context.arc(x, y, radius - 3, startAngle, endAngle);\n    const alpha = applyAlpha ? color.alpha() : 1;\n    context.fillStyle = color.rgb().alpha(alpha).string();\n    context.fill();\n\n    context.globalCompositeOperation = \"source-over\";\n  }\n\n  private drawActiveHueSliderColor(): void {\n    const { color } = this;\n\n    if (!color) {\n      return;\n    }\n\n    const hsvColor = color.hsv().saturationv(100).value(100);\n\n    const {\n      dimensions: {\n        thumb: { radius },\n      },\n    } = this;\n\n    const width = this.effectiveSliderWidth;\n    const x = hsvColor.hue() / (HUE_LIMIT_CONSTRAINED / width);\n    const y = radius;\n    const sliderBoundX = this.getSliderBoundX(x, width, radius);\n\n    requestAnimationFrame(() => {\n      this.hueScopeLeft = sliderBoundX;\n    });\n\n    this.drawThumb(this.hueSliderRenderingContext, radius, sliderBoundX, y, hsvColor, false);\n  }\n\n  private drawHueSlider(): void {\n    const context = this.hueSliderRenderingContext;\n    const {\n      dimensions: {\n        slider: { height },\n        thumb: { radius: thumbRadius },\n      },\n    } = this;\n\n    const x = 0;\n    const y = thumbRadius - height / 2;\n    const width = this.effectiveSliderWidth;\n\n    const gradient = context.createLinearGradient(0, 0, width, 0);\n\n    const hueSliderColorStopKeywords = [\n      \"red\",\n      \"yellow\",\n      \"lime\",\n      \"cyan\",\n      \"blue\",\n      \"magenta\",\n      \"#ff0004\" /* 1 unit less than #ff0 to avoid duplicate values within range */,\n    ];\n\n    const offset = 1 / (hueSliderColorStopKeywords.length - 1);\n    let currentOffset = 0;\n\n    hueSliderColorStopKeywords.forEach((keyword) => {\n      gradient.addColorStop(currentOffset, Color(keyword).string());\n      currentOffset += offset;\n    });\n\n    context.clearRect(0, 0, width, height + this.getSliderCapSpacing() * 2);\n\n    this.drawSliderPath(context, height, width, x, y);\n\n    context.fillStyle = gradient;\n    context.fill();\n\n    context.strokeStyle = \"rgba(0,0,0,0.3)\";\n    context.lineWidth = 1;\n    context.stroke();\n\n    this.drawActiveHueSliderColor();\n  }\n\n  private drawOpacitySlider(): void {\n    const context = this.opacitySliderRenderingContext;\n    const {\n      baseColorFieldColor: previousColor,\n      dimensions: {\n        slider: { height },\n        thumb: { radius: thumbRadius },\n      },\n    } = this;\n\n    const x = 0;\n    const y = thumbRadius - height / 2;\n    const width = this.effectiveSliderWidth;\n\n    context.clearRect(0, 0, width, height + this.getSliderCapSpacing() * 2);\n\n    const gradient = context.createLinearGradient(0, y, width, 0);\n    const startColor = previousColor.rgb().alpha(0);\n    const midColor = previousColor.rgb().alpha(0.5);\n    const endColor = previousColor.rgb().alpha(1);\n\n    gradient.addColorStop(0, startColor.string());\n    gradient.addColorStop(0.5, midColor.string());\n    gradient.addColorStop(1, endColor.string());\n\n    this.drawSliderPath(context, height, width, x, y);\n\n    const pattern = context.createPattern(this.getCheckeredBackgroundPattern(), \"repeat\");\n    context.fillStyle = pattern;\n    context.fill();\n\n    context.fillStyle = gradient;\n    context.fill();\n\n    context.strokeStyle = \"rgba(0,0,0,0.3)\";\n    context.lineWidth = 1;\n    context.stroke();\n\n    this.drawActiveOpacitySliderColor();\n  }\n\n  private drawSliderPath(\n    context: CanvasRenderingContext2D,\n    height: number,\n    width: number,\n    x: number,\n    y: number,\n  ): void {\n    const radius = height / 2 + 1;\n    context.beginPath();\n    context.moveTo(x + radius, y);\n    context.lineTo(x + width - radius, y);\n    context.quadraticCurveTo(x + width, y, x + width, y + radius);\n    context.lineTo(x + width, y + height - radius);\n    context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n    context.lineTo(x + radius, y + height);\n    context.quadraticCurveTo(x, y + height, x, y + height - radius);\n    context.lineTo(x, y + radius);\n    context.quadraticCurveTo(x, y, x + radius, y);\n    context.closePath();\n  }\n\n  private getCheckeredBackgroundPattern(): HTMLCanvasElement {\n    if (this.checkerPattern) {\n      return this.checkerPattern;\n    }\n\n    const pattern = document.createElement(\"canvas\");\n    pattern.width = 10;\n    pattern.height = 10;\n    const patternContext = pattern.getContext(\"2d\");\n\n    patternContext.fillStyle = \"#ccc\";\n    patternContext.fillRect(0, 0, 10, 10);\n    patternContext.fillStyle = \"#fff\";\n    patternContext.fillRect(0, 0, 5, 5);\n    patternContext.fillRect(5, 5, 5, 5);\n\n    this.checkerPattern = pattern;\n\n    return pattern;\n  }\n\n  private drawActiveOpacitySliderColor(): void {\n    const { color } = this;\n\n    if (!color) {\n      return;\n    }\n\n    const hsvColor = color;\n\n    const {\n      dimensions: {\n        thumb: { radius },\n      },\n    } = this;\n\n    const width = this.effectiveSliderWidth;\n    const x = alphaToOpacity(hsvColor.alpha()) / (OPACITY_LIMITS.max / width);\n    const y = radius;\n    const sliderBoundX = this.getSliderBoundX(x, width, radius);\n\n    requestAnimationFrame(() => {\n      this.opacityScopeLeft = sliderBoundX;\n    });\n\n    this.drawThumb(this.opacitySliderRenderingContext, radius, sliderBoundX, y, hsvColor, true);\n  }\n\n  private getSliderBoundX(x: number, width: number, radius: number): number {\n    const closeToEdge = closeToRangeEdge(x, width, radius);\n\n    return closeToEdge === 0\n      ? x\n      : closeToEdge === -1\n        ? remap(x, 0, width, radius, radius * 2)\n        : remap(x, 0, width, width - radius * 2, width - radius);\n  }\n\n  private storeOpacityScope = (node: HTMLDivElement): void => {\n    this.opacityScopeNode = node;\n  };\n\n  private handleOpacityScopeKeyDown = (event: KeyboardEvent): void => {\n    const modifier = event.shiftKey ? 10 : 1;\n    const { key } = event;\n    const arrowKeyToXOffset = {\n      ArrowUp: 0.01,\n      ArrowRight: 0.01,\n      ArrowDown: -0.01,\n      ArrowLeft: -0.01,\n    };\n\n    if (arrowKeyToXOffset[key]) {\n      event.preventDefault();\n      const delta = arrowKeyToXOffset[key] * modifier;\n      const alpha = this.baseColorFieldColor.alpha();\n      const color = this.baseColorFieldColor.alpha(alpha + delta);\n      this.internalColorSet(color, false);\n    }\n  };\n\n  private updateColorFromChannels(channels: this[\"channels\"]): void {\n    this.internalColorSet(Color(channels, this.channelMode));\n  }\n\n  private updateChannelsFromColor(color: Color | null): void {\n    this.channels = color ? this.toChannels(color) : [null, null, null, null];\n  }\n\n  private toChannels(color: Color): Channels {\n    const { channelMode } = this;\n\n    const channels = color[channelMode]()\n      .array()\n      .map((value, index) => {\n        const isAlpha = index === 3;\n        return isAlpha ? value : Math.floor(value);\n      });\n\n    if (channels.length === 3) {\n      channels.push(1); // Color omits alpha when 1\n    }\n\n    return channels as Channels;\n  }\n\n  private getAdjustedScopePosition(left: number, top: number): [number, number] {\n    return [left - SCOPE_SIZE / 2, top - SCOPE_SIZE / 2];\n  }\n}\n","export const CSS = {\n  container: \"container\",\n  hexInput: \"hex-input\",\n  opacityInput: \"opacity-input\",\n};\n",":host {\n  @apply block;\n}\n\n.container {\n  @apply flex w-full items-center flex-nowrap;\n}\n\n.hex-input {\n  @apply grow uppercase;\n}\n\n.opacity-input {\n  inline-size: 68px;\n  margin-inline-start: -1px;\n}\n\n:host([scale=\"s\"]) {\n  .container {\n    @apply flex-wrap gap-y-0.5;\n  }\n\n  .opacity-input {\n    inline-size: unset;\n    margin-inline-start: unset;\n  }\n}\n\n:host([scale=\"l\"]) {\n  .opacity-input {\n    inline-size: 88px;\n  }\n}\n\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport Color from \"color\";\nimport { Scale } from \"../interfaces\";\nimport { Channels, RGB } from \"../color-picker/interfaces\";\nimport {\n  alphaToOpacity,\n  hexChar,\n  hexify,\n  isLonghandHex,\n  isValidHex,\n  normalizeHex,\n  opacityToAlpha,\n  rgbToHex,\n} from \"../color-picker/utils\";\nimport { focusElement } from \"../../utils/dom\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { NumberingSystem } from \"../../utils/locale\";\nimport { OPACITY_LIMITS } from \"../color-picker/resources\";\nimport { ColorPickerMessages } from \"../color-picker/assets/color-picker/t9n\";\nimport { CSS } from \"./resources\";\n\nconst DEFAULT_COLOR = Color();\n\n@Component({\n  tag: \"calcite-color-picker-hex-input\",\n  styleUrl: \"color-picker-hex-input.scss\",\n  shadow: true,\n})\nexport class ColorPickerHexInput implements LoadableComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    const { allowEmpty, alphaChannel, value } = this;\n\n    if (value) {\n      const normalized = normalizeHex(value, alphaChannel);\n\n      if (isValidHex(normalized, alphaChannel)) {\n        this.internalSetValue(normalized, normalized, false);\n      }\n\n      return;\n    }\n\n    if (allowEmpty) {\n      this.internalSetValue(null, null, false);\n    }\n  }\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, an empty color (`null`) will be allowed as a `value`.\n   *\n   * When `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.\n   */\n  @Prop() allowEmpty = false;\n\n  /**\n   * When `true`, the component will allow updates to the color's alpha value.\n   */\n  @Prop() alphaChannel = false;\n\n  /**\n   * Specifies accessible label for the input field.\n   *\n   * @deprecated use `messages` instead\n   */\n  @Prop() hexLabel = \"Hex\";\n\n  /**\n   * Messages are passed by parent component for accessible labels.\n   *\n   * @internal\n   */\n  @Prop() messages: ColorPickerMessages;\n\n  /** Specifies the Unicode numeral system used by the component for localization. */\n  @Prop() numberingSystem?: NumberingSystem;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /**\n   * The hex value.\n   */\n  @Prop({ mutable: true, reflect: true }) value: string = normalizeHex(\n    hexify(DEFAULT_COLOR, this.alphaChannel),\n    this.alphaChannel,\n    true,\n  );\n\n  @Watch(\"value\")\n  handleValueChange(value: string, oldValue: string): void {\n    this.internalSetValue(value, oldValue, false);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Emitted when the hex value changes.\n   */\n  @Event({ cancelable: false }) calciteColorPickerHexInputChange: EventEmitter<void>;\n\n  private onHexInputBlur = (): void => {\n    const node = this.hexInputNode;\n    const inputValue = node.value;\n    const hex = `#${inputValue}`;\n    const { allowEmpty, internalColor } = this;\n    const willClearValue = allowEmpty && !inputValue;\n    const isLonghand = isLonghandHex(hex);\n\n    // ensure modified pasted hex values are committed since we prevent default to remove the # char.\n    this.onHexInputChange();\n\n    if (willClearValue || (isValidHex(hex) && isLonghand)) {\n      return;\n    }\n\n    // manipulating DOM directly since rerender doesn't update input value\n    node.value =\n      allowEmpty && !internalColor\n        ? \"\"\n        : this.formatHexForInternalInput(\n            rgbToHex(\n              // always display hex input in RRGGBB format\n              internalColor.object() as any as RGB,\n            ),\n          );\n  };\n\n  private onOpacityInputBlur = (): void => {\n    const node = this.opacityInputNode;\n    const inputValue = node.value;\n    const { allowEmpty, internalColor } = this;\n    const willClearValue = allowEmpty && !inputValue;\n\n    if (willClearValue) {\n      return;\n    }\n\n    // manipulating DOM directly since rerender doesn't update input value\n    node.value =\n      allowEmpty && !internalColor ? \"\" : this.formatOpacityForInternalInput(internalColor);\n  };\n\n  private onHexInputChange = (): void => {\n    const nodeValue = this.hexInputNode.value;\n    let value = nodeValue;\n\n    if (value) {\n      const normalized = normalizeHex(value, false);\n      const preserveExistingAlpha = isValidHex(normalized) && this.alphaChannel;\n      if (preserveExistingAlpha && this.internalColor) {\n        const alphaHex = normalizeHex(this.internalColor.hexa(), true).slice(-2);\n        value = `${normalized + alphaHex}`;\n      }\n    }\n\n    this.internalSetValue(value, this.value);\n  };\n\n  private onOpacityInputChange = (): void => {\n    const node = this.opacityInputNode;\n    let value: number | string;\n\n    if (!node.value) {\n      value = node.value;\n    } else {\n      const alpha = opacityToAlpha(Number(node.value));\n      value = this.internalColor?.alpha(alpha).hexa();\n    }\n\n    this.internalSetValue(value, this.value);\n  };\n\n  private onHexInput = (): void => {\n    const hexInputValue = `#${this.hexInputNode.value}`;\n    const oldValue = this.value;\n\n    if (\n      isValidHex(hexInputValue, this.alphaChannel) &&\n      isLonghandHex(hexInputValue, this.alphaChannel)\n    ) {\n      this.internalSetValue(hexInputValue, oldValue);\n    }\n  };\n\n  protected onInputKeyDown = (event: KeyboardEvent): void => {\n    const { altKey, ctrlKey, metaKey, shiftKey } = event;\n    const { alphaChannel, hexInputNode, internalColor, value } = this;\n    const { key } = event;\n    const composedPath = event.composedPath();\n\n    if (key === \"Tab\" || key === \"Enter\") {\n      if (composedPath.includes(hexInputNode)) {\n        this.onHexInputChange();\n      } else {\n        this.onOpacityInputChange();\n      }\n\n      if (key === \"Enter\") {\n        event.preventDefault();\n      }\n\n      return;\n    }\n\n    const isNudgeKey = key === \"ArrowDown\" || key === \"ArrowUp\";\n    const oldValue = this.value;\n\n    if (isNudgeKey) {\n      if (!value) {\n        this.internalSetValue(this.previousNonNullValue, oldValue);\n        event.preventDefault();\n        return;\n      }\n\n      const direction = key === \"ArrowUp\" ? 1 : -1;\n      const bump = shiftKey ? 10 : 1;\n\n      this.internalSetValue(\n        hexify(\n          this.nudgeRGBChannels(\n            internalColor,\n            bump * direction,\n            composedPath.includes(hexInputNode) ? \"rgb\" : \"a\",\n          ),\n          alphaChannel,\n        ),\n        oldValue,\n      );\n\n      event.preventDefault();\n      return;\n    }\n\n    const withModifiers = altKey || ctrlKey || metaKey;\n    const singleChar = key.length === 1;\n    const validHexChar = hexChar.test(key);\n\n    if (singleChar && !withModifiers && !validHexChar) {\n      event.preventDefault();\n    }\n  };\n\n  private onHexInputPaste = (event: ClipboardEvent): void => {\n    const hex = event.clipboardData.getData(\"text\");\n\n    if (isValidHex(hex, this.alphaChannel) && isLonghandHex(hex, this.alphaChannel)) {\n      event.preventDefault();\n      this.hexInputNode.value = hex.slice(1);\n      this.internalSetValue(hex, this.value);\n    }\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteColorPickerHexInputElement;\n\n  private hexInputNode: HTMLCalciteInputTextElement;\n\n  /**\n   * The last valid/selected color. Used as a fallback if an invalid hex code is entered.\n   */\n  @State() internalColor: Color | null = DEFAULT_COLOR;\n\n  private opacityInputNode: HTMLCalciteInputNumberElement;\n\n  private previousNonNullValue: string = this.value;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  render(): VNode {\n    const { alphaChannel, hexLabel, internalColor, messages, scale, value } = this;\n    const hexInputValue = this.formatHexForInternalInput(value);\n    const opacityInputValue = this.formatOpacityForInternalInput(internalColor);\n    const inputScale = scale === \"l\" ? \"m\" : \"s\";\n\n    return (\n      <div class={CSS.container}>\n        <calcite-input-text\n          class={CSS.hexInput}\n          label={messages?.hex || hexLabel}\n          maxLength={6}\n          onCalciteInputTextChange={this.onHexInputChange}\n          onCalciteInputTextInput={this.onHexInput}\n          onCalciteInternalInputTextBlur={this.onHexInputBlur}\n          onKeyDown={this.onInputKeyDown}\n          onPaste={this.onHexInputPaste}\n          prefixText=\"#\"\n          ref={this.storeHexInputRef}\n          scale={inputScale}\n          value={hexInputValue}\n        />\n        {alphaChannel ? (\n          <calcite-input-number\n            class={CSS.opacityInput}\n            key=\"opacity-input\"\n            label={messages?.opacity}\n            max={OPACITY_LIMITS.max}\n            maxLength={3}\n            min={OPACITY_LIMITS.min}\n            numberButtonType=\"none\"\n            numberingSystem={this.numberingSystem}\n            onCalciteInputNumberChange={this.onOpacityInputChange}\n            onCalciteInternalInputNumberBlur={this.onOpacityInputBlur}\n            onKeyDown={this.onInputKeyDown}\n            ref={this.storeOpacityInputRef}\n            scale={inputScale}\n            suffixText=\"%\"\n            value={opacityInputValue}\n          />\n        ) : null}\n      </div>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    return focusElement(this.hexInputNode);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private internalSetValue(value: string | null, oldValue: string | null, emit = true): void {\n    if (value) {\n      const { alphaChannel } = this;\n      const normalized = normalizeHex(value, alphaChannel, alphaChannel);\n\n      if (isValidHex(normalized, alphaChannel)) {\n        const { internalColor: currentColor } = this;\n        const nextColor = Color(normalized);\n        const normalizedLonghand = normalizeHex(hexify(nextColor, alphaChannel), alphaChannel);\n\n        const changed =\n          !currentColor ||\n          normalizedLonghand !== normalizeHex(hexify(currentColor, alphaChannel), alphaChannel);\n\n        this.internalColor = nextColor;\n        this.previousNonNullValue = normalizedLonghand;\n        this.value = normalizedLonghand;\n\n        if (changed && emit) {\n          this.calciteColorPickerHexInputChange.emit();\n        }\n\n        return;\n      }\n    } else if (this.allowEmpty) {\n      this.internalColor = null;\n      this.value = null;\n\n      if (emit) {\n        this.calciteColorPickerHexInputChange.emit();\n      }\n\n      return;\n    }\n\n    this.value = oldValue;\n  }\n\n  private storeHexInputRef = (node: HTMLCalciteInputTextElement): void => {\n    this.hexInputNode = node;\n  };\n\n  private storeOpacityInputRef = (node: HTMLCalciteInputNumberElement): void => {\n    this.opacityInputNode = node;\n  };\n\n  private formatHexForInternalInput(hex: string): string {\n    return hex ? hex.replace(\"#\", \"\").slice(0, 6) : \"\";\n  }\n\n  private formatOpacityForInternalInput(color: Color): string {\n    return color ? `${alphaToOpacity(color.alpha())}` : \"\";\n  }\n\n  private nudgeRGBChannels(color: Color, amount: number, context: \"rgb\" | \"a\"): Color {\n    let nudgedChannels: Channels;\n    const channels = color.array();\n    const rgbChannels = channels.slice(0, 3);\n\n    if (context === \"rgb\") {\n      const nudgedRGBChannels = rgbChannels.map((channel) => channel + amount);\n      nudgedChannels = [\n        ...nudgedRGBChannels,\n        this.alphaChannel ? channels[3] : undefined,\n      ] as Channels;\n    } else {\n      const nudgedAlpha = opacityToAlpha(alphaToOpacity(color.alpha()) + amount);\n      nudgedChannels = [...rgbChannels, nudgedAlpha] as Channels;\n    }\n\n    return Color(nudgedChannels);\n  }\n}\n","export const CSS = {\n  swatch: \"swatch\",\n  noColorSwatch: \"swatch--no-color\",\n  checker: \"checker\",\n};\n\nexport const COLORS = {\n  borderLight: \"rgba(0, 0, 0, 0.3)\",\n  borderDark: \"rgba(255, 255, 255, 0.15)\",\n};\n\nconst checkerSquareSize = 4;\n\nexport const CHECKER_DIMENSIONS = {\n  squareSize: checkerSquareSize,\n  size: checkerSquareSize * 2,\n};\n","$size-s: 20px;\n$size-m: 24px;\n$size-l: 28px;\n\n:host {\n  @apply relative inline-flex;\n}\n\n:host([scale=\"s\"]) {\n  @apply h-5 w-5;\n}\n\n:host([scale=\"m\"]) {\n  @apply h-6 w-6;\n}\n\n:host([scale=\"l\"]) {\n  @apply h-8 w-8;\n}\n\n.swatch {\n  @apply overflow-hidden;\n  block-size: inherit;\n  inline-size: inherit;\n\n  rect {\n    @apply transition-all duration-150 ease-in-out;\n  }\n}\n\n.swatch--no-color {\n  rect {\n    fill: var(--calcite-color-foreground-1);\n  }\n\n  line {\n    stroke: var(--calcite-color-status-danger);\n  }\n}\n\n.checker {\n  fill: #cacaca;\n}\n\n@include base-component();\n","import { Component, Element, Fragment, h, Prop, VNode, Watch } from \"@stencil/core\";\nimport Color from \"color\";\nimport { getModeName } from \"../../utils/dom\";\nimport { Scale } from \"../interfaces\";\nimport { hexify } from \"../color-picker/utils\";\nimport { CHECKER_DIMENSIONS, COLORS, CSS } from \"./resources\";\n\n@Component({\n  tag: \"calcite-color-picker-swatch\",\n  styleUrl: \"color-picker-swatch.scss\",\n  shadow: true,\n})\nexport class ColorPickerSwatch {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, the component is active.\n   */\n  @Prop({\n    reflect: true,\n  })\n  active = false;\n\n  /**\n   * The color value.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\n   */\n  @Prop()\n  color: string | null;\n\n  @Watch(\"color\")\n  handleColorChange(color: string | null): void {\n    this.internalColor = color ? Color(color) : null;\n  }\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({\n    reflect: true,\n  })\n  scale: Scale = \"m\";\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteColorPickerSwatchElement;\n\n  private internalColor: Color;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  componentWillLoad(): void {\n    this.handleColorChange(this.color);\n  }\n\n  render(): VNode {\n    const isEmpty = !this.internalColor;\n    const classes = {\n      [CSS.swatch]: true,\n      [CSS.noColorSwatch]: isEmpty,\n    };\n\n    return (\n      <svg class={classes} xmlns=\"http://www.w3.org/2000/svg\">\n        {this.renderSwatch()}\n      </svg>\n    );\n  }\n\n  renderSwatch(): VNode {\n    const { active, el, internalColor } = this;\n    const borderRadius = active ? \"100%\" : \"0\";\n    const theme = getModeName(el);\n    const borderColor = theme === \"light\" ? COLORS.borderLight : COLORS.borderDark;\n    const commonSwatchProps = {\n      height: \"100%\",\n      rx: borderRadius,\n      stroke: borderColor,\n\n      // stroke-width and clip-path are needed to hide overflowing portion of stroke\n      // see https://stackoverflow.com/a/7273346/194216\n\n      // using attribute to work around Stencil using the prop name vs the attribute when rendering\n      [\"stroke-width\"]: \"2\",\n      width: \"100%\",\n    };\n\n    const isEmpty = !internalColor;\n\n    if (isEmpty) {\n      return (\n        <Fragment>\n          <clipPath id=\"shape\">\n            <rect height=\"100%\" rx={borderRadius} width=\"100%\" />\n          </clipPath>\n          <rect\n            clip-path={`inset(0 round ${borderRadius})`}\n            rx={borderRadius}\n            {...commonSwatchProps}\n          />\n          <line clip-path=\"url(#shape)\" stroke-width=\"3\" x1=\"100%\" x2=\"0\" y1=\"0\" y2=\"100%\" />\n        </Fragment>\n      );\n    }\n\n    const alpha = internalColor.alpha();\n    const hex = hexify(internalColor);\n    const hexa = hexify(internalColor, alpha < 1);\n\n    return (\n      <Fragment>\n        <title>{hexa}</title>\n        <defs>\n          <pattern\n            height={CHECKER_DIMENSIONS.size}\n            id=\"checker\"\n            patternUnits=\"userSpaceOnUse\"\n            width={CHECKER_DIMENSIONS.size}\n            x=\"0\"\n            y=\"0\"\n          >\n            <rect\n              class={CSS.checker}\n              height={CHECKER_DIMENSIONS.squareSize}\n              width={CHECKER_DIMENSIONS.squareSize}\n              x=\"0\"\n              y=\"0\"\n            />\n            <rect\n              class={CSS.checker}\n              height={CHECKER_DIMENSIONS.squareSize}\n              width={CHECKER_DIMENSIONS.squareSize}\n              x={CHECKER_DIMENSIONS.squareSize}\n              y={CHECKER_DIMENSIONS.squareSize}\n            />\n          </pattern>\n        </defs>\n        <rect fill=\"url(#checker)\" height=\"100%\" rx={borderRadius} width=\"100%\" />\n        <rect\n          fill={hex}\n          style={{\n            \"clip-path\":\n              alpha < 1 ? \"polygon(100% 0, 0 0, 0 100%)\" : `inset(0 round ${borderRadius})`,\n          }}\n          {...commonSwatchProps}\n        />\n        {alpha < 1 ? (\n          <rect\n            fill={hexa}\n            key=\"opacity-fill\"\n            style={{ \"clip-path\": \"polygon(100% 0, 100% 100%, 0 100%)\" }}\n            {...commonSwatchProps}\n          />\n        ) : null}\n      </Fragment>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}