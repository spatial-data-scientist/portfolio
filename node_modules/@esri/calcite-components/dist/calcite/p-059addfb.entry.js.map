{"version":3,"names":["CSS","container","handle","ICON_TYPES","grip","getScreenReaderText","item","status","valueList","items","messages","total","length","position","getItemIndex","template","dragHandleIdle","dragHandleActive","dragHandleChange","dragHandleCommit","replacePlaceholders","label","getHandleAndItemElement","event","composedPath","find","dataset","jsHandle","undefined","tagName","toLowerCase","text","replacePosition","replace","toString","replaceLabel","valueListCss","CalciteValueListStyle0","ValueList","this","lastSelectedItem","mutationObserver","createObserver","mutationObserverCallback","bind","handleSelector","dragSelector","setFilterEl","el","filterEl","setFilteredItems","filteredItems","deselectRemovedItems","deselectSiblingItems","selectSiblings","handleFilter","handleFilterEvent","getItemData","keyDownHandler","defaultPrevented","handleActivated","key","updateScreenReaderText","call","preventDefault","nextIndex","moveItemIndex","appendChild","itemAtNextIndex","children","insertionReferenceItem","nextElementSibling","insertBefore","getItems","calciteListOrderChange","emit","map","value","requestAnimationFrame","focusElement","updateHandleAriaLabel","storeAssistiveEl","assistiveTextEl","handleFocusIn","Map","onMessagesChange","effectiveLocaleChange","updateMessages","effectiveLocale","connectedCallback","connectInteractive","connectLocalized","connectMessages","initialize","initializeObserver","setUpSorting","componentWillLoad","setUpLoadableComponent","setUpMessages","componentDidLoad","setComponentLoaded","handleInitialFilter","componentDidRender","updateHostInteraction","disconnectedCallback","disconnectInteractive","disconnectSortableComponent","disconnectLocalized","disconnectMessages","cleanUpObserver","calciteListFocusOutHandler","calciteListItemRemoveHandler","removeItem","calciteListItemChangeHandler","calciteInternalListItemPropsChangeHandler","stopPropagation","setUpFilter","calciteInternalListItemValueChangeHandler","onGlobalDragStart","onGlobalDragEnd","onDragEnd","onDragStart","onDragSort","Array","from","querySelectorAll","values","setUpItems","filterEnabled","dataForFilter","dragEnabled","connectSortableComponent","handleBlur","getSelectedItems","selectedValues","setFocus","focusId","componentFocusable","getIconType","type","textContent","handleElement","ariaLabel","handleValueListItemBlur","detail","render","h","List","onBlur","onFocusin","onKeyDown","props","ICONS","drag","SLOTS","actionsEnd","actionsStart","valueListItemCss","CalciteValueListItemStyle0","ValueListItem","pickListItem","guid","getPickListRef","handleKeyDown","calciteValueListItemDragHandleBlur","handleEl","handleSelectChange","selected","connectConditionalSlotComponent","disconnectConditionalSlotComponent","toggleSelected","coerce","renderActionsEnd","hasActionsEnd","getSlotted","name","slot","PICK_LIST_SLOTS","renderActionsStart","hasActionsStart","renderHandle","icon","iconFlipRtl","class","ref","role","tabindex","flipRtl","scale","Host","id","InteractiveContainer","disabled","description","deselectDisabled","metadata","nonInteractive","onCalciteListItemChange","removable"],"sources":["src/components/value-list/resources.ts","src/components/value-list/utils.ts","src/components/value-list/value-list.scss?tag=calcite-value-list&encapsulation=shadow","src/components/value-list/value-list.tsx","src/components/value-list-item/resources.ts","src/components/value-list-item/value-list-item.scss?tag=calcite-value-list-item&encapsulation=shadow","src/components/value-list-item/value-list-item.tsx"],"sourcesContent":["import { ValueUnion } from \"../types\";\n\nexport const CSS = {\n  container: \"container\",\n  handle: \"handle\",\n};\n\nexport const ICON_TYPES = {\n  grip: \"grip\",\n};\n\nexport type ICON_TYPES = ValueUnion<typeof ICON_TYPES>;\n\nexport const TEXT = {\n  filterResults: \"Filter results\",\n};\n","import { getItemIndex } from \"../pick-list/shared-list-logic\";\nimport { DragStatus } from \"./interfaces\";\nimport { ValueList } from \"./value-list\";\n\nexport function getScreenReaderText(\n  item: HTMLCalciteValueListItemElement,\n  status: DragStatus,\n  valueList: ValueList<HTMLCalciteValueListItemElement>,\n): string {\n  const { items, messages } = valueList;\n\n  const total = items.length;\n  const position = getItemIndex(valueList, item) + 1;\n  const template =\n    status === \"idle\"\n      ? messages.dragHandleIdle\n      : status === \"active\"\n        ? messages.dragHandleActive\n        : status === \"change\"\n          ? messages.dragHandleChange\n          : messages.dragHandleCommit;\n\n  return replacePlaceholders(template, item.label, position, total);\n}\n\nexport function getHandleAndItemElement(event: KeyboardEvent | FocusEvent): {\n  handle: HTMLCalciteHandleElement;\n  item: HTMLCalciteValueListItemElement;\n} {\n  const handle = event\n    .composedPath()\n    .find((item: HTMLElement) => item.dataset?.jsHandle !== undefined) as HTMLCalciteHandleElement;\n\n  const item = event\n    .composedPath()\n    .find(\n      (item: HTMLElement) => item.tagName?.toLowerCase() === \"calcite-value-list-item\",\n    ) as HTMLCalciteValueListItemElement;\n\n  return { handle, item };\n}\n\nexport function replacePlaceholders(text: string, label: string, position: number, total: number): string {\n  const replacePosition = text.replace(\"{position}\", position.toString());\n  const replaceLabel = replacePosition.replace(\"{itemLabel}\", label);\n  return replaceLabel.replace(\"{total}\", total.toString());\n}\n",":host {\n  @apply text-color-2\n    text-n1\n    relative\n    box-border\n    flex\n    flex-shrink-0\n    flex-grow-0\n    flex-col\n    items-stretch\n    bg-transparent;\n  * {\n    @apply box-border;\n  }\n}\n\n@include disabled();\n\ncalcite-value-list-item:last-of-type {\n  @apply shadow-none;\n}\n\n:host([filter-enabled]) header {\n  @apply bg-foreground-1\n    mb-1\n    flex\n    items-center\n    justify-end;\n  &.sticky-pos {\n    @apply sticky top-0 z-sticky;\n  }\n  @apply shadow-border-bottom;\n}\n\ncalcite-filter {\n  @apply mb-px;\n}\n\n.assistive-text {\n  @apply sr-only;\n}\n\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Listen,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport Sortable from \"sortablejs\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport { createObserver } from \"../../utils/observers\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport {\n  calciteInternalListItemValueChangeHandler,\n  calciteListFocusOutHandler,\n  calciteListItemChangeHandler,\n  cleanUpObserver,\n  deselectRemovedItems,\n  deselectSiblingItems,\n  getItemData,\n  handleFilter,\n  handleFilterEvent,\n  handleInitialFilter,\n  initialize,\n  initializeObserver,\n  ItemData,\n  keyDownHandler,\n  ListFocusId,\n  moveItemIndex,\n  mutationObserverCallback,\n  removeItem,\n  selectSiblings,\n  setFocus,\n  setUpItems,\n} from \"../pick-list/shared-list-logic\";\nimport List from \"../pick-list/shared-list-render\";\nimport { ListItemAndHandle } from \"../value-list-item/interfaces\";\nimport {\n  DragDetail,\n  connectSortableComponent,\n  disconnectSortableComponent,\n  SortableComponent,\n} from \"../../utils/sortableComponent\";\nimport { focusElement } from \"../../utils/dom\";\nimport { ValueListMessages } from \"./assets/value-list/t9n\";\nimport { CSS, ICON_TYPES } from \"./resources\";\nimport { getHandleAndItemElement, getScreenReaderText } from \"./utils\";\n\n/**\n * @deprecated Use the `calcite-list` component instead.\n * @slot - A slot for adding `calcite-value-list-item` elements. List items are displayed as a vertical list.\n * @slot menu-actions - A slot for adding a button and menu combination for performing actions, such as sorting.\n */\n@Component({\n  tag: \"calcite-value-list\",\n  styleUrl: \"value-list.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class ValueList<\n    ItemElement extends HTMLCalciteValueListItemElement = HTMLCalciteValueListItemElement,\n  >\n  implements\n    InteractiveComponent,\n    LoadableComponent,\n    LocalizedComponent,\n    T9nComponent,\n    SortableComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * When provided, the method will be called to determine whether the element can move from the list.\n   */\n  @Prop() canPull: (detail: DragDetail) => boolean;\n\n  /**\n   * When provided, the method will be called to determine whether the element can be added from another list.\n   */\n  @Prop() canPut: (detail: DragDetail) => boolean;\n\n  /**\n   * When `true`, `calcite-value-list-item`s are sortable via a draggable button.\n   */\n  @Prop({ reflect: true }) dragEnabled = false;\n\n  /**\n   * The currently filtered items.\n   *\n   * @readonly\n   */\n  @Prop({ mutable: true }) filteredItems: HTMLCalciteValueListItemElement[] = [];\n\n  /**\n   * The currently filtered data.\n   *\n   * @readonly\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by shared-list-logic module\n  @Prop({ mutable: true }) filteredData: ItemData = [];\n\n  /**\n   * When `true`, an input appears at the top of the component that can be used by end users to filter list items.\n   */\n  @Prop({ reflect: true }) filterEnabled = false;\n\n  /**\n   * Placeholder text for the filter's input field.\n   */\n  @Prop({ reflect: true }) filterPlaceholder: string;\n\n  /**\n   * Text for the filter input field.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by shared-list-logic module\n  @Prop({ reflect: true, mutable: true }) filterText: string;\n\n  /**\n   * The component's group identifier.\n   *\n   * To drag elements from one list into another, both lists must have the same group value.\n   */\n  @Prop({ reflect: true }) group?: string;\n\n  /**\n   * When `true`, a busy indicator is displayed.\n   */\n  @Prop({ reflect: true }) loading = false;\n\n  /**\n   * Similar to standard radio buttons and checkboxes.\n   * When `true`, a user can select multiple `calcite-value-list-item`s at a time.\n   * When `false`, only a single `calcite-value-list-item` can be selected at a time,\n   * and a new selection will deselect previous selections.\n   */\n  @Prop({ reflect: true }) multiple = false;\n\n  /**\n   * When `true` and single-selection is enabled, the selection changes when navigating `calcite-value-list-item`s via keyboard.\n   */\n  @Prop({ reflect: true }) selectionFollowsFocus = false;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ValueListMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ValueListMessages;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteValueListElement;\n\n  @State() dataForFilter: ItemData = [];\n\n  @State() defaultMessages: ValueListMessages;\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() selectedValues: Map<string, ItemElement> = new Map();\n\n  items: ItemElement[];\n\n  lastSelectedItem: ItemElement = null;\n\n  mutationObserver = createObserver(\"mutation\", mutationObserverCallback.bind(this));\n\n  sortable: Sortable;\n\n  emitCalciteListChange: () => void;\n\n  emitCalciteListFilter: () => void;\n\n  filterEl: HTMLCalciteFilterElement;\n\n  assistiveTextEl: HTMLSpanElement;\n\n  handleSelector = `.${CSS.handle}`;\n\n  dragSelector = \"calcite-value-list-item\";\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectInteractive(this);\n    connectLocalized(this);\n    connectMessages(this);\n    initialize.call(this);\n    initializeObserver.call(this);\n    this.setUpSorting();\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n    handleInitialFilter.call(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectInteractive(this);\n    disconnectSortableComponent(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    cleanUpObserver.call(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Emits when any of the list item selections have changed.\n   */\n  @Event({ cancelable: false }) calciteListChange: EventEmitter<\n    Map<string, HTMLCalciteValueListItemElement>\n  >;\n\n  /**\n   * Emits when the order of the list has changed.\n   */\n  @Event({ cancelable: false }) calciteListOrderChange: EventEmitter<any[]>;\n\n  /**\n   * Emits when a filter has changed.\n   */\n  @Event({ cancelable: false }) calciteListFilter: EventEmitter<void>;\n\n  @Listen(\"focusout\")\n  calciteListFocusOutHandler(event: FocusEvent): void {\n    calciteListFocusOutHandler.call(this, event);\n  }\n\n  @Listen(\"calciteListItemRemove\")\n  calciteListItemRemoveHandler(event: CustomEvent<void>): void {\n    removeItem.call(this, event);\n  }\n\n  @Listen(\"calciteListItemChange\")\n  calciteListItemChangeHandler(event: CustomEvent): void {\n    calciteListItemChangeHandler.call(this, event);\n  }\n\n  @Listen(\"calciteInternalListItemPropsChange\")\n  calciteInternalListItemPropsChangeHandler(event: CustomEvent): void {\n    event.stopPropagation();\n    this.setUpFilter();\n  }\n\n  @Listen(\"calciteInternalListItemValueChange\")\n  calciteInternalListItemValueChangeHandler(event: CustomEvent): void {\n    calciteInternalListItemValueChangeHandler.call(this, event);\n    event.stopPropagation();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  onGlobalDragStart(): void {\n    cleanUpObserver.call(this);\n  }\n\n  onGlobalDragEnd(): void {\n    initializeObserver.call(this);\n  }\n\n  onDragEnd(): void {}\n\n  onDragStart(): void {}\n\n  onDragSort(): void {\n    this.items = Array.from(this.el.querySelectorAll<ItemElement>(\"calcite-value-list-item\"));\n    const values = this.items.map((item) => item.value);\n    this.calciteListOrderChange.emit(values);\n  }\n\n  getItems(): ItemElement[] {\n    return Array.from(this.el.querySelectorAll<ItemElement>(\"calcite-value-list-item\"));\n  }\n\n  setUpItems(): void {\n    setUpItems.call(this, \"calcite-value-list-item\");\n    this.setUpSorting();\n  }\n\n  setUpFilter(): void {\n    if (this.filterEnabled) {\n      this.dataForFilter = this.getItemData();\n    }\n  }\n\n  setFilterEl = (el: HTMLCalciteFilterElement): void => {\n    this.filterEl = el;\n  };\n\n  setFilteredItems = (filteredItems: HTMLCalciteValueListItemElement[]): void => {\n    this.filteredItems = filteredItems;\n  };\n\n  setUpSorting(): void {\n    const { dragEnabled } = this;\n\n    if (!dragEnabled) {\n      return;\n    }\n\n    connectSortableComponent(this);\n  }\n\n  deselectRemovedItems = deselectRemovedItems.bind(this);\n\n  deselectSiblingItems = deselectSiblingItems.bind(this);\n\n  selectSiblings = selectSiblings.bind(this);\n\n  handleFilter = handleFilter.bind(this);\n\n  handleFilterEvent = handleFilterEvent.bind(this);\n\n  getItemData = getItemData.bind(this);\n\n  keyDownHandler = (event: KeyboardEvent): void => {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    const { handle, item } = getHandleAndItemElement(event);\n    if (handle && !item.handleActivated && event.key === \" \") {\n      this.updateScreenReaderText(getScreenReaderText(item, \"commit\", this));\n    }\n\n    if (!handle || !item.handleActivated) {\n      keyDownHandler.call(this, event);\n      return;\n    }\n\n    event.preventDefault();\n\n    const { items } = this;\n\n    if (event.key === \" \") {\n      this.updateScreenReaderText(getScreenReaderText(item, \"active\", this));\n    }\n\n    if ((event.key !== \"ArrowUp\" && event.key !== \"ArrowDown\") || items.length <= 1) {\n      return;\n    }\n\n    const { el } = this;\n    const nextIndex = moveItemIndex(this, item, event.key === \"ArrowUp\" ? \"up\" : \"down\");\n    if (nextIndex === items.length - 1) {\n      el.appendChild(item);\n    } else {\n      const itemAtNextIndex = el.children[nextIndex];\n      const insertionReferenceItem =\n        itemAtNextIndex === item.nextElementSibling\n          ? itemAtNextIndex.nextElementSibling\n          : itemAtNextIndex;\n      el.insertBefore(item, insertionReferenceItem);\n    }\n\n    this.items = this.getItems();\n    this.calciteListOrderChange.emit(this.items.map(({ value }) => value));\n\n    requestAnimationFrame(() => focusElement(handle));\n    item.handleActivated = true;\n\n    this.updateHandleAriaLabel(handle, getScreenReaderText(item, \"change\", this));\n  };\n\n  handleBlur(): void {\n    if (this.dragEnabled) {\n      this.updateScreenReaderText(\"\");\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /** Returns the component's selected items. */\n  @Method()\n  async getSelectedItems(): Promise<Map<string, HTMLCalciteValueListItemElement>> {\n    return this.selectedValues;\n  }\n\n  /**\n   * Sets focus on the component's first focusable element.\n   *\n   * @param focusId\n   */\n  @Method()\n  async setFocus(focusId?: ListFocusId): Promise<void> {\n    await componentFocusable(this);\n\n    return setFocus.call(this, focusId);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  getIconType(): typeof ICON_TYPES | null {\n    let type = null;\n    if (this.dragEnabled) {\n      type = ICON_TYPES.grip;\n    }\n    return type;\n  }\n\n  updateScreenReaderText(text: string): void {\n    this.assistiveTextEl.textContent = text;\n  }\n\n  updateHandleAriaLabel(handleElement: HTMLSpanElement, text: string): void {\n    handleElement.ariaLabel = text;\n  }\n\n  storeAssistiveEl = (el: HTMLSpanElement): void => {\n    this.assistiveTextEl = el;\n  };\n\n  handleFocusIn = (event: FocusEvent): void => {\n    const { handle, item } = getHandleAndItemElement(event);\n    if (!item?.handleActivated && item && handle) {\n      this.updateHandleAriaLabel(handle, getScreenReaderText(item, \"idle\", this));\n    }\n  };\n\n  @Listen(\"calciteValueListItemDragHandleBlur\")\n  handleValueListItemBlur(event: CustomEvent<ListItemAndHandle>): void {\n    const { item, handle } = event.detail;\n    if (!item?.handleActivated && item) {\n      this.updateHandleAriaLabel(handle, getScreenReaderText(item, \"idle\", this));\n    }\n    event.stopPropagation();\n  }\n\n  render(): VNode {\n    return (\n      <List\n        onBlur={this.handleBlur}\n        onFocusin={this.handleFocusIn}\n        onKeyDown={this.keyDownHandler}\n        props={this}\n      />\n    );\n  }\n}\n","export const ICONS = {\n  drag: \"drag\",\n};\n\nexport const SLOTS = {\n  actionsEnd: \"actions-end\",\n  actionsStart: \"actions-start\",\n};\n",":host {\n  @apply bg-foreground-1\n    text-color-2\n    text-n1\n    shadow-border-bottom\n    mb-px\n    box-border\n    flex;\n  transition:\n    background-color var(--calcite-animation-timing),\n    box-shadow var(--calcite-animation-timing);\n  * {\n    @apply box-border;\n  }\n}\n\ncalcite-pick-list-item {\n  @apply relative\n    m-0\n    flex-grow\n    shadow-none;\n}\n\n:host([active]),\n:host([selected]) {\n  @apply shadow-outline-active;\n}\n\n.handle {\n  @apply flex\n    cursor-move\n    items-center\n    justify-center\n    border-none\n    bg-transparent\n    py-0\n    px-1;\n  color: theme(\"borderColor.color.input\");\n  &:hover {\n    @apply bg-foreground-2 text-color-1;\n  }\n  @apply focus-base;\n  &:focus {\n    @apply focus-inset;\n  }\n  &--activated {\n    @apply bg-foreground-3 text-color-1;\n  }\n  calcite-icon {\n    color: inherit;\n  }\n}\n\n@include disabled();\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  VNode,\n} from \"@stencil/core\";\nimport {\n  ConditionalSlotComponent,\n  connectConditionalSlotComponent,\n  disconnectConditionalSlotComponent,\n} from \"../../utils/conditionalSlot\";\nimport { getSlotted } from \"../../utils/dom\";\nimport { guid } from \"../../utils/guid\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { CSS, SLOTS as PICK_LIST_SLOTS } from \"../pick-list-item/resources\";\nimport { ICON_TYPES } from \"../pick-list/resources\";\nimport { ListItemAndHandle } from \"./interfaces\";\nimport { ICONS, SLOTS } from \"./resources\";\n\n/**\n * @deprecated Use the `calcite-list` component instead.\n * @slot actions-end - A slot for adding `calcite-action`s or content to the end side of the component.\n * @slot actions-start - A slot for adding `calcite-action`s or content to the start side of the component.\n */\n@Component({\n  tag: \"calcite-value-list-item\",\n  styleUrl: \"value-list-item.scss\",\n  shadow: true,\n})\nexport class ValueListItem\n  implements ConditionalSlotComponent, InteractiveComponent, LoadableComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * A description for the component that displays below the label text.\n   */\n  @Prop({ reflect: true }) description?: string;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * @internal\n   */\n  @Prop() deselectDisabled = false;\n\n  /**\n   * When `true`, prevents the content of the component from user interaction.\n   */\n  @Prop({ reflect: true }) nonInteractive = false;\n\n  /**\n   * @internal\n   */\n  @Prop({ mutable: true }) handleActivated? = false;\n\n  /**\n   * Determines the icon SVG symbol that will be shown. Options are circle, square, grip or null.\n   *\n   * @see [ICON_TYPES](https://github.com/Esri/calcite-design-system/blob/dev/src/components/pick-list/resources.ts#L5)\n   */\n  @Prop({ reflect: true }) icon?: ICON_TYPES | null = null;\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /**\n   * Label and accessible name for the component. Appears next to the icon.\n   */\n  @Prop({ reflect: true }) label!: string;\n\n  /**\n   * Provides additional metadata to the component. Primary use is for a filter on the parent list.\n   */\n  @Prop() metadata?: Record<string, unknown>;\n\n  /**\n   * When `true`, adds an action to remove the component.\n   */\n  @Prop({ reflect: true }) removable = false;\n\n  /**\n   * When `true`, the component is selected.\n   */\n  @Prop({ reflect: true, mutable: true }) selected = false;\n\n  /**\n   * The component's value.\n   */\n  @Prop() value!: any;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteValueListItemElement;\n\n  pickListItem: HTMLCalcitePickListItemElement = null;\n\n  handleEl: HTMLSpanElement;\n\n  guid = `calcite-value-list-item-${guid()}`;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectConditionalSlotComponent(this);\n    connectInteractive(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectConditionalSlotComponent(this);\n    disconnectInteractive(this);\n  }\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Toggle the selection state. By default this won't trigger an event.\n   * The first argument allows the value to be coerced, rather than swapping values.\n   *\n   * @param coerce\n   */\n  @Method()\n  async toggleSelected(coerce?: boolean): Promise<void> {\n    this.pickListItem.toggleSelected(coerce);\n  }\n\n  /** Set focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    return this.pickListItem?.setFocus();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Fires when the component is selected or unselected.\n   */\n  @Event({ cancelable: false }) calciteListItemChange: EventEmitter<{\n    item: HTMLCalciteValueListItemElement;\n    value: any;\n    selected: boolean;\n    shiftPressed: boolean;\n  }>;\n\n  /**\n   * Fires when the remove button is pressed.\n   */\n  @Event({ cancelable: true }) calciteListItemRemove: EventEmitter<void>; // wrapped pick-list-item emits this\n\n  /**\n   * @internal\n   */\n  @Event({ cancelable: false })\n  calciteValueListItemDragHandleBlur: EventEmitter<ListItemAndHandle>;\n\n  @Listen(\"calciteListItemChange\")\n  calciteListItemChangeHandler(event: CustomEvent): void {\n    // adjust item payload from wrapped item before bubbling\n    event.detail.item = this.el;\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  getPickListRef = (el: HTMLCalcitePickListItemElement): HTMLCalcitePickListItemElement =>\n    (this.pickListItem = el);\n\n  handleKeyDown = (event: KeyboardEvent): void => {\n    if (event.key === \" \") {\n      this.handleActivated = !this.handleActivated;\n    }\n  };\n\n  handleBlur = (): void => {\n    this.handleActivated = false;\n    this.calciteValueListItemDragHandleBlur.emit({ item: this.el, handle: this.handleEl });\n  };\n\n  handleSelectChange = (event: CustomEvent): void => {\n    this.selected = event.detail.selected;\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  renderActionsEnd(): VNode {\n    const { el } = this;\n    const hasActionsEnd = getSlotted(el, SLOTS.actionsEnd);\n\n    return hasActionsEnd ? (\n      <slot name={SLOTS.actionsEnd} slot={PICK_LIST_SLOTS.actionsEnd} />\n    ) : null;\n  }\n\n  renderActionsStart(): VNode {\n    const { el } = this;\n    const hasActionsStart = getSlotted(el, SLOTS.actionsStart);\n\n    return hasActionsStart ? (\n      <slot name={SLOTS.actionsStart} slot={PICK_LIST_SLOTS.actionsStart} />\n    ) : null;\n  }\n\n  renderHandle(): VNode {\n    const { icon, iconFlipRtl } = this;\n    if (icon === ICON_TYPES.grip) {\n      return (\n        <span\n          class={{\n            [CSS.handle]: true,\n            [CSS.handleActivated]: this.handleActivated,\n          }}\n          data-js-handle\n          onBlur={this.handleBlur}\n          onKeyDown={this.handleKeyDown}\n          ref={(el) => (this.handleEl = el as HTMLSpanElement)}\n          role=\"button\"\n          tabindex=\"0\"\n        >\n          <calcite-icon flipRtl={iconFlipRtl} icon={ICONS.drag} scale=\"s\" />\n        </span>\n      );\n    }\n  }\n\n  render(): VNode {\n    return (\n      <Host id={this.el.id || this.guid}>\n        <InteractiveContainer disabled={this.disabled}>\n          {this.renderHandle()}\n          <calcite-pick-list-item\n            description={this.description}\n            deselectDisabled={this.deselectDisabled}\n            disabled={this.disabled}\n            label={this.label}\n            metadata={this.metadata}\n            nonInteractive={this.nonInteractive}\n            onCalciteListItemChange={this.handleSelectChange}\n            ref={this.getPickListRef}\n            removable={this.removable}\n            selected={this.selected}\n            value={this.value}\n          >\n            {this.renderActionsStart()}\n            {this.renderActionsEnd()}\n          </calcite-pick-list-item>\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n}\n"],"mappings":";;;;;qxBAEO,MAAMA,EAAM,CACjBC,UAAW,YACXC,OAAQ,UAGH,MAAMC,EAAa,CACxBC,KAAM,Q,SCJQC,EACdC,EACAC,EACAC,GAEA,MAAMC,MAAEA,EAAKC,SAAEA,GAAaF,EAE5B,MAAMG,EAAQF,EAAMG,OACpB,MAAMC,EAAWC,EAAaN,EAAWF,GAAQ,EACjD,MAAMS,EACJR,IAAW,OACPG,EAASM,eACTT,IAAW,SACTG,EAASO,iBACTV,IAAW,SACTG,EAASQ,iBACTR,EAASS,iBAEnB,OAAOC,GAAoBL,EAAUT,EAAKe,MAAOR,EAAUF,EAC7D,C,SAEgBW,EAAwBC,GAItC,MAAMrB,EAASqB,EACZC,eACAC,MAAMnB,GAAsBA,EAAKoB,SAASC,WAAaC,YAE1D,MAAMtB,EAAOiB,EACVC,eACAC,MACEnB,GAAsBA,EAAKuB,SAASC,gBAAkB,4BAG3D,MAAO,CAAE5B,SAAQI,OACnB,C,SAEgBc,GAAoBW,EAAcV,EAAeR,EAAkBF,GACjF,MAAMqB,EAAkBD,EAAKE,QAAQ,aAAcpB,EAASqB,YAC5D,MAAMC,EAAeH,EAAgBC,QAAQ,cAAeZ,GAC5D,OAAOc,EAAaF,QAAQ,UAAWtB,EAAMuB,WAC/C,CC9CA,MAAME,GAAe,s/CACrB,MAAAC,GAAeD,G,MCiFFE,GAAS,M,kMAsIpBC,KAAAC,iBAAgC,KAEhCD,KAAAE,iBAAmBC,EAAe,WAAYC,EAAyBC,KAAKL,OAY5EA,KAAAM,eAAiB,IAAI7C,EAAIE,SAEzBqC,KAAAO,aAAe,0BAgIfP,KAAAQ,YAAeC,IACbT,KAAKU,SAAWD,CAAE,EAGpBT,KAAAW,iBAAoBC,IAClBZ,KAAKY,cAAgBA,CAAa,EAapCZ,KAAAa,qBAAuBA,EAAqBR,KAAKL,MAEjDA,KAAAc,qBAAuBA,EAAqBT,KAAKL,MAEjDA,KAAAe,eAAiBA,EAAeV,KAAKL,MAErCA,KAAAgB,aAAeA,EAAaX,KAAKL,MAEjCA,KAAAiB,kBAAoBA,EAAkBZ,KAAKL,MAE3CA,KAAAkB,YAAcA,EAAYb,KAAKL,MAE/BA,KAAAmB,eAAkBnC,IAChB,GAAIA,EAAMoC,iBAAkB,CAC1B,M,CAGF,MAAMzD,OAAEA,EAAMI,KAAEA,GAASgB,EAAwBC,GACjD,GAAIrB,IAAWI,EAAKsD,iBAAmBrC,EAAMsC,MAAQ,IAAK,CACxDtB,KAAKuB,uBAAuBzD,EAAoBC,EAAM,SAAUiC,M,CAGlE,IAAKrC,IAAWI,EAAKsD,gBAAiB,CACpCF,EAAeK,KAAKxB,KAAMhB,GAC1B,M,CAGFA,EAAMyC,iBAEN,MAAMvD,MAAEA,GAAU8B,KAElB,GAAIhB,EAAMsC,MAAQ,IAAK,CACrBtB,KAAKuB,uBAAuBzD,EAAoBC,EAAM,SAAUiC,M,CAGlE,GAAKhB,EAAMsC,MAAQ,WAAatC,EAAMsC,MAAQ,aAAgBpD,EAAMG,QAAU,EAAG,CAC/E,M,CAGF,MAAMoC,GAAEA,GAAOT,KACf,MAAM0B,EAAYC,EAAc3B,KAAMjC,EAAMiB,EAAMsC,MAAQ,UAAY,KAAO,QAC7E,GAAII,IAAcxD,EAAMG,OAAS,EAAG,CAClCoC,EAAGmB,YAAY7D,E,KACV,CACL,MAAM8D,EAAkBpB,EAAGqB,SAASJ,GACpC,MAAMK,EACJF,IAAoB9D,EAAKiE,mBACrBH,EAAgBG,mBAChBH,EACNpB,EAAGwB,aAAalE,EAAMgE,E,CAGxB/B,KAAK9B,MAAQ8B,KAAKkC,WAClBlC,KAAKmC,uBAAuBC,KAAKpC,KAAK9B,MAAMmE,KAAI,EAAGC,WAAYA,KAE/DC,uBAAsB,IAAMC,EAAa7E,KACzCI,EAAKsD,gBAAkB,KAEvBrB,KAAKyC,sBAAsB9E,EAAQG,EAAoBC,EAAM,SAAUiC,MAAM,EAuD/EA,KAAA0C,iBAAoBjC,IAClBT,KAAK2C,gBAAkBlC,CAAE,EAG3BT,KAAA4C,cAAiB5D,IACf,MAAMrB,OAAEA,EAAMI,KAAEA,GAASgB,EAAwBC,GACjD,IAAKjB,GAAMsD,iBAAmBtD,GAAQJ,EAAQ,CAC5CqC,KAAKyC,sBAAsB9E,EAAQG,EAAoBC,EAAM,OAAQiC,M,iBA7YrC,M,8DAeG,M,mBAOqC,G,kBAQ1B,G,mBAKT,M,6FAuBN,M,cAQC,M,2BAKa,M,2EA6Bd,G,oDAIR,G,oBAOyB,IAAI6C,G,CA/BxD,gBAAAC,G,CA2BA,qBAAAC,GACEC,EAAehD,KAAMA,KAAKiD,gB,CA+B5B,iBAAAC,GACEC,EAAmBnD,MACnBoD,EAAiBpD,MACjBqD,EAAgBrD,MAChBsD,EAAW9B,KAAKxB,MAChBuD,EAAmB/B,KAAKxB,MACxBA,KAAKwD,c,CAGP,uBAAMC,GACJC,EAAuB1D,YACjB2D,EAAc3D,K,CAGtB,gBAAA4D,GACEC,EAAmB7D,MACnB8D,EAAoBtC,KAAKxB,K,CAG3B,kBAAA+D,GACEC,EAAsBhE,K,CAGxB,oBAAAiE,GACEC,EAAsBlE,MACtBmE,EAA4BnE,MAC5BoE,EAAoBpE,MACpBqE,EAAmBrE,MACnBsE,EAAgB9C,KAAKxB,K,CA2BvB,0BAAAuE,CAA2BvF,GACzBuF,EAA2B/C,KAAKxB,KAAMhB,E,CAIxC,4BAAAwF,CAA6BxF,GAC3ByF,EAAWjD,KAAKxB,KAAMhB,E,CAIxB,4BAAA0F,CAA6B1F,GAC3B0F,EAA6BlD,KAAKxB,KAAMhB,E,CAI1C,yCAAA2F,CAA0C3F,GACxCA,EAAM4F,kBACN5E,KAAK6E,a,CAIP,yCAAAC,CAA0C9F,GACxC8F,EAA0CtD,KAAKxB,KAAMhB,GACrDA,EAAM4F,iB,CASR,iBAAAG,GACET,EAAgB9C,KAAKxB,K,CAGvB,eAAAgF,GACEzB,EAAmB/B,KAAKxB,K,CAG1B,SAAAiF,GAAS,CAET,WAAAC,GAAW,CAEX,UAAAC,GACEnF,KAAK9B,MAAQkH,MAAMC,KAAKrF,KAAKS,GAAG6E,iBAA8B,4BAC9D,MAAMC,EAASvF,KAAK9B,MAAMmE,KAAKtE,GAASA,EAAKuE,QAC7CtC,KAAKmC,uBAAuBC,KAAKmD,E,CAGnC,QAAArD,GACE,OAAOkD,MAAMC,KAAKrF,KAAKS,GAAG6E,iBAA8B,2B,CAG1D,UAAAE,GACEA,EAAWhE,KAAKxB,KAAM,2BACtBA,KAAKwD,c,CAGP,WAAAqB,GACE,GAAI7E,KAAKyF,cAAe,CACtBzF,KAAK0F,cAAgB1F,KAAKkB,a,EAY9B,YAAAsC,GACE,MAAMmC,YAAEA,GAAgB3F,KAExB,IAAK2F,EAAa,CAChB,M,CAGFC,EAAyB5F,K,CAgE3B,UAAA6F,GACE,GAAI7F,KAAK2F,YAAa,CACpB3F,KAAKuB,uBAAuB,G,EAYhC,sBAAMuE,GACJ,OAAO9F,KAAK+F,c,CASd,cAAMC,CAASC,SACPC,EAAmBlG,MAEzB,OAAOgG,EAASxE,KAAKxB,KAAMiG,E,CAS7B,WAAAE,GACE,IAAIC,EAAO,KACX,GAAIpG,KAAK2F,YAAa,CACpBS,EAAOxI,EAAWC,I,CAEpB,OAAOuI,C,CAGT,sBAAA7E,CAAuB/B,GACrBQ,KAAK2C,gBAAgB0D,YAAc7G,C,CAGrC,qBAAAiD,CAAsB6D,EAAgC9G,GACpD8G,EAAcC,UAAY/G,C,CAe5B,uBAAAgH,CAAwBxH,GACtB,MAAMjB,KAAEA,EAAIJ,OAAEA,GAAWqB,EAAMyH,OAC/B,IAAK1I,GAAMsD,iBAAmBtD,EAAM,CAClCiC,KAAKyC,sBAAsB9E,EAAQG,EAAoBC,EAAM,OAAQiC,M,CAEvEhB,EAAM4F,iB,CAGR,MAAA8B,GACE,OACEC,EAACC,EAAI,CAAAtF,IAAA,2CACHuF,OAAQ7G,KAAK6F,WACbiB,UAAW9G,KAAK4C,cAChBmE,UAAW/G,KAAKmB,eAChB6F,MAAOhH,M,8LCrgBR,MAAMiH,GAAQ,CACnBC,KAAM,QAGD,MAAMC,GAAQ,CACnBC,WAAY,cACZC,aAAc,iBCNhB,MAAMC,GAAmB,+nEACzB,MAAAC,GAAeD,G,MC8CFE,GAAa,M,0OA6ExBxH,KAAAyH,aAA+C,KAI/CzH,KAAA0H,KAAO,2BAA2BA,MA8FlC1H,KAAA2H,eAAkBlH,GACfT,KAAKyH,aAAehH,EAEvBT,KAAA4H,cAAiB5I,IACf,GAAIA,EAAMsC,MAAQ,IAAK,CACrBtB,KAAKqB,iBAAmBrB,KAAKqB,e,GAIjCrB,KAAA6F,WAAa,KACX7F,KAAKqB,gBAAkB,MACvBrB,KAAK6H,mCAAmCzF,KAAK,CAAErE,KAAMiC,KAAKS,GAAI9C,OAAQqC,KAAK8H,UAAW,EAGxF9H,KAAA+H,mBAAsB/I,IACpBgB,KAAKgI,SAAWhJ,EAAMyH,OAAOuB,QAAQ,E,yCA7KH,M,sBAKT,M,oBAKe,M,qBAKE,M,UAOQ,K,iBAGb,M,4DAeF,M,cAKc,M,qBA2BnD,iBAAA9E,GACE+E,EAAgCjI,MAChCmD,EAAmBnD,K,CAGrB,oBAAAiE,GACEiE,EAAmClI,MACnCkE,EAAsBlE,K,CAGxB,iBAAAyD,GACEC,EAAuB1D,K,CAGzB,gBAAA4D,GACEC,EAAmB7D,K,CAGrB,kBAAA+D,GACEC,EAAsBhE,K,CAgBxB,oBAAMmI,CAAeC,GACnBpI,KAAKyH,aAAaU,eAAeC,E,CAKnC,cAAMpC,SACEE,EAAmBlG,MAEzB,OAAOA,KAAKyH,cAAczB,U,CA+B5B,4BAAAtB,CAA6B1F,GAE3BA,EAAMyH,OAAO1I,KAAOiC,KAAKS,E,CAiC3B,gBAAA4H,GACE,MAAM5H,GAAEA,GAAOT,KACf,MAAMsI,EAAgBC,EAAW9H,EAAI0G,GAAMC,YAE3C,OAAOkB,EACL3B,EAAA,QAAM6B,KAAMrB,GAAMC,WAAYqB,KAAMC,EAAgBtB,aAClD,I,CAGN,kBAAAuB,GACE,MAAMlI,GAAEA,GAAOT,KACf,MAAM4I,EAAkBL,EAAW9H,EAAI0G,GAAME,cAE7C,OAAOuB,EACLjC,EAAA,QAAM6B,KAAMrB,GAAME,aAAcoB,KAAMC,EAAgBrB,eACpD,I,CAGN,YAAAwB,GACE,MAAMC,KAAEA,EAAIC,YAAEA,GAAgB/I,KAC9B,GAAI8I,IAASlL,EAAWC,KAAM,CAC5B,OACE8I,EAAA,QACEqC,MAAO,CACL,CAACvL,EAAIE,QAAS,KACd,CAACF,EAAI4D,iBAAkBrB,KAAKqB,iBAC7B,sBAEDwF,OAAQ7G,KAAK6F,WACbkB,UAAW/G,KAAK4H,cAChBqB,IAAMxI,GAAQT,KAAK8H,SAAWrH,EAC9ByI,KAAK,SACLC,SAAS,KAETxC,EAAA,gBAAcyC,QAASL,EAAaD,KAAM7B,GAAMC,KAAMmC,MAAM,M,EAMpE,MAAA3C,GACE,OACEC,EAAC2C,EAAI,CAAAhI,IAAA,2CAACiI,GAAIvJ,KAAKS,GAAG8I,IAAMvJ,KAAK0H,MAC3Bf,EAAC6C,EAAoB,CAAAlI,IAAA,2CAACmI,SAAUzJ,KAAKyJ,UAClCzJ,KAAK6I,eACNlC,EAAA,0BAAArF,IAAA,2CACEoI,YAAa1J,KAAK0J,YAClBC,iBAAkB3J,KAAK2J,iBACvBF,SAAUzJ,KAAKyJ,SACf3K,MAAOkB,KAAKlB,MACZ8K,SAAU5J,KAAK4J,SACfC,eAAgB7J,KAAK6J,eACrBC,wBAAyB9J,KAAK+H,mBAC9BkB,IAAKjJ,KAAK2H,eACVoC,UAAW/J,KAAK+J,UAChB/B,SAAUhI,KAAKgI,SACf1F,MAAOtC,KAAKsC,OAEXtC,KAAK2I,qBACL3I,KAAKqI,qB","ignoreList":[]}