{"version":3,"file":"config.spec.js","sourceRoot":"","sources":["../../../src/utils/config.spec.ts"],"names":[],"mappings":"AAAA,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,IAAI,MAAiC,CAAC;IAEtC;;OAEG;IACH,KAAK,UAAU,UAAU;QACvB,OAAO,MAAM,CAAC,UAAU,CAAC,CAAC;IAC5B,CAAC;IAED,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;IAEtC,EAAE,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;QAC5B,MAAM,GAAG,MAAM,UAAU,EAAE,CAAC;QAC5B,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,oBAAoB,GAAG,EAAE,CAAC;QAEhC,UAAU,CAAC,aAAa,GAAG;YACzB,cAAc,EAAE,oBAAoB;SACrC,CAAC;QAEF,MAAM,GAAG,MAAM,UAAU,EAAE,CAAC;QAE5B,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,MAAM,iCAAiC,GAAG,qBAAqB,CAAC;QAEhE,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,GAAG,MAAM,UAAU,EAAE,CAAC;YAC5B,MAAM,CAAC,YAAY,EAAE,CAAC;YACtB,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;QACnF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uEAAuE,EAAE,KAAK,IAAI,EAAE;YACrF,UAAU,CAAC,aAAa,GAAG,EAAE,CAAC;YAC9B,MAAM,GAAG,MAAM,UAAU,EAAE,CAAC;YAC5B,MAAM,CAAC,YAAY,EAAE,CAAC;YACtB,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;QACnF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,UAAU,CAAC,aAAa,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;YACjD,MAAM,GAAG,MAAM,UAAU,EAAE,CAAC;YAC5B,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAC5C,MAAM,CAAC,YAAY,EAAE,CAAC;YACtB,MAAM,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["describe(\"config\", () => {\n  let config: typeof import(\"./config\");\n\n  /**\n   * Need to load the config at runtime to allow test to specify custom configuration if needed.\n   */\n  async function loadConfig(): Promise<typeof import(\"./config\")> {\n    return import(\"./config\");\n  }\n\n  beforeEach(() => jest.resetModules());\n\n  it(\"has defaults\", async () => {\n    config = await loadConfig();\n    expect(config.focusTrapStack).toHaveLength(0);\n  });\n\n  it(\"allows custom configuration\", async () => {\n    const customFocusTrapStack = [];\n\n    globalThis.calciteConfig = {\n      focusTrapStack: customFocusTrapStack,\n    };\n\n    config = await loadConfig();\n\n    expect(config.focusTrapStack).toBe(customFocusTrapStack);\n  });\n\n  describe(\"stampVersion\", () => {\n    const calciteVersionPreBuildPlaceholder = \"__CALCITE_VERSION__\";\n\n    it(\"creates global config and stamps the version onto it\", async () => {\n      config = await loadConfig();\n      config.stampVersion();\n      expect(globalThis.calciteConfig.version).toBe(calciteVersionPreBuildPlaceholder);\n    });\n\n    it(\"stamps the version onto existing config if there's no version present\", async () => {\n      globalThis.calciteConfig = {};\n      config = await loadConfig();\n      config.stampVersion();\n      expect(globalThis.calciteConfig.version).toBe(calciteVersionPreBuildPlaceholder);\n    });\n\n    it(\"warns if the version is already set\", async () => {\n      globalThis.calciteConfig = { version: \"1.33.7\" };\n      config = await loadConfig();\n      const warnSpy = jest.spyOn(console, \"warn\");\n      config.stampVersion();\n      expect(warnSpy).toHaveBeenCalled();\n    });\n  });\n});\n"]}