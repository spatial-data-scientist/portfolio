/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../geometry.js";import{rasterRendererTypes as t,websceneRasterRendererTypes as r,read as i}from"../../rasterRenderers.js";import s from"../../request.js";import{deprecatedProperty as n}from"../../core/deprecate.js";import o from"../../core/Error.js";import a from"../../core/Logger.js";import{property as l}from"../../core/accessorSupport/decorators/property.js";import{ensureClass as u}from"../../core/accessorSupport/ensureType.js";import"../../core/RandomLCG.js";import"../../core/has.js";import{reader as c}from"../../core/accessorSupport/decorators/reader.js";import{subclass as m}from"../../core/accessorSupport/decorators/subclass.js";import{getInfo as d}from"../../geometry/support/spatialReferenceUtils.js";import{sanitizeUrl as h}from"../support/arcgisLayerUrl.js";import{url as p}from"../support/commonProperties.js";import f from"../support/DimensionalDefinition.js";import y from"../support/MultidimensionalSubset.js";import b from"../support/RasterFunction.js";import g from"../support/RasterJobHandler.js";import R from"../support/TileInfo.js";import F from"../support/rasterDatasets/FunctionRaster.js";import{getDefaultMultidimensionalDefinition as I,hasExcludedVariableOrDimension as J,getDefaultVariableInfo as v,isMultiSliceOrRangeDefinition as _,getSubsetVariablesFromMdInfo as S}from"../support/rasterDatasets/multidimensionalUtils.js";import{snapToRaster as w,clip as x}from"../support/rasterFunctions/clipUtils.js";import{create as j}from"../support/rasterFunctions/rasterFunctionHelper.js";import{load as D,projectExtent as H,projectPolygon as T}from"../support/rasterFunctions/rasterProjectionHelper.js";import{computeStatisticsHistograms as N}from"../support/rasterFunctions/stretchUtils.js";import{convertVectorFieldData as O}from"../support/rasterFunctions/vectorFieldUtils.js";import{normalizeRendererJSON as z,getVariableRasterInfo as C,getDefaultInterpolation as P,getDefaultBandCombination as E,getFunctionColorramp as A,createDefaultRenderer as M}from"../../renderers/support/rasterRendererHelper.js";import U from"../../renderers/support/RasterSymbolizer.js";import k from"../../rest/support/ImageHistogramParameters.js";import{createFlowMesh as q}from"../../views/2d/engine/flow/dataUtils.js";import B from"../../geometry/SpatialReference.js";import L from"../../geometry/Point.js";const V=V=>{let $=class extends V{constructor(...e){super(...e),this._isConstructedFromFunctionRaster=!1,this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.interpolation="nearest",this.multidimensionalSubset=null,this.raster=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.symbolizer=null,this._isConstructedFromFunctionRaster="Function"===e[0]?.raster?.datasetFormat}get fullExtent(){return this.serviceRasterInfo?.extent}set multidimensionalDefinition(e){this._set("multidimensionalDefinition",e),this.updateRenderer()}set rasterFunction(e){"none"===e?.functionName?.toLowerCase()&&(e=void 0),this._set("rasterFunction",e),this.updateRasterFunction()}get rasterInfo(){return n(a.getLogger(this),"rasterInfo",{replacement:"serviceRasterInfo",version:"4.29",warnOnce:!0}),this._get("serviceRasterInfo")}set url(e){this._set("url",h(e,a.getLogger(this)))}set renderer(e){null==e&&null==this.rasterFunction?this._configDefaultRenderer("override"):(this._set("renderer",e),this.updateRenderer())}readRenderer(e,t,r){const s=t?.layerDefinition?.drawingInfo?.renderer;return i(s,r)||void 0}async convertVectorFieldData(e,t){const{serviceRasterInfo:r}=this;if(null==e||!r)return null;const i=this._rasterJobHandler.instance,s=r.dataType;return i?i.convertVectorFieldData({pixelBlock:e,dataType:s},t):O(e,s)}async computeStatisticsHistograms(e,t){await this.load(t),e=u(k,e).clone();const{serviceRasterInfo:r}=this;if(null==r)throw new o("imagery-tile-mixin:compute-statistics-histograms","serviceRasterInfo must be specified");const{geometry:i}=e;if(null==i)throw new o("imagery-tile-mixin:compute-statistics-histograms","geometry must be specified");let s=i;const{spatialReference:n}=r;i.spatialReference.equals(n)||(await D(),s="extent"===i.type?H(i,n):T(i,n));const a=e.pixelSize??new L({x:r.pixelSize.x,y:r.pixelSize.y,spatialReference:n}),{extent:l,width:c,height:m}=w(r,s,a),d=await this.fetchPixels(l,c,m,{...t,interpolation:"nearest"});if(null==d.pixelBlock)throw new o("imagery-tile-mixin:compute-statistics-histograms","failed to fetch pixels");const h=await x(d.pixelBlock,l,s),p=this._rasterJobHandler.instance;return p?p.computeStatisticsHistograms({pixelBlock:h},t):N(h)}async createFlowMesh(e,t){const r=this._rasterJobHandler.instance;return r?r.createFlowMesh(e,t):q(e.meshType,e.simulationSettings,e.flowData,null!=t.signal?t.signal:(new AbortController).signal)}normalizeRasterFetchOptions(e){const{multidimensionalInfo:t}=this.serviceRasterInfo??{};if(null==t)return e;let r=e.multidimensionalDefinition||this.multidimensionalDefinition;r?.length||(r=I(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset}));const i=e.timeExtent||this.timeExtent;if(null!=r&&null!=i&&(null!=i.start||null!=i.end)){r=r.map((e=>e.clone()));const s=t.variables.find((({name:e})=>e===r[0].variableName))?.dimensions?.find((({name:e})=>"StdTime"===e)),n=r.find((({dimensionName:e})=>"StdTime"===e));if(!s||!n)return{...e,multidimensionalDefinition:null};const{start:o,end:a}=i,l=null==o?null:o.getTime(),u=null==a?null:a.getTime(),c=l??u,m=u??l;if(null!=s.values){const e=s.values.filter((e=>{if(Array.isArray(e)){if(c===m)return e[0]<=c&&e[1]>=c;const t=e[0]<=c&&e[1]>c||e[0]<m&&e[1]>=m,r=e[0]>=c&&e[1]<=m||e[0]<c&&e[1]>m;return t||r}return c===m?e===c:e>=c&&e<=m}));if(e.length){const t=e.sort(((e,t)=>{const r=Array.isArray(e)?e[0]:e,i=Array.isArray(e)?e[1]:e,s=Array.isArray(t)?t[0]:t,n=Array.isArray(t)?t[1]:t;if(c===m)return r-s;return Math.abs(i-m)-Math.abs(n-m)}))[0];n.values=[t]}else r=null}else if(s.hasRegularIntervals&&s.extent){const[e,t]=s.extent;c>t||m<e?r=null:n.values=c===m?[c]:[Math.max(e,c),Math.min(t,m)]}}return null!=r&&J(r,this.multidimensionalSubset)?{...e,multidimensionalDefinition:null}:{...e,multidimensionalDefinition:r}}async updateRasterFunction(){if(!this.loaded||"imagery-tile"!==this.type||!this.rasterFunction&&!this._cachedRasterFunctionJson||JSON.stringify(this.rasterFunction)===JSON.stringify(this._cachedRasterFunctionJson))return;if(this._isConstructedFromFunctionRaster&&"Function"===this.raster.datasetFormat){const e=this.raster.rasterFunction.toJSON();return!this.rasterFunction&&e&&this._set("rasterFunction",b.fromJSON(e)),void(this._cachedRasterFunctionJson=this.rasterFunction?.toJSON())}let e,t=this.raster,r=!1;"Function"===t.datasetFormat?(e=t.primaryRasters.rasters,t=e[0],r=!0):e=[t];const{rasterFunction:i}=this;if(i){const r={raster:t};e.length>1&&e.forEach((e=>r[e.url]=e));const s=j(i.functionDefinition?.toJSON()??i.toJSON(),r),n=new F({rasterFunction:s});n.rasterJobHandler=this._rasterJobHandler.instance,await n.open(),this._cachedRasterFunctionJson=this.rasterFunction?.toJSON(),this.raster=n}else this.raster=t,this._cachedRasterFunctionJson=null,await t.when();if(this._cachedRendererJson=null,!r&&!i)return;const{bandIds:s}=this,{bandCount:n}=this.raster.rasterInfo,o=s?.length?s.some((e=>e>=n)):n>=3;s&&(o||this.renderer&&"raster-stretch"!==this.renderer.type)&&this._set("bandIds",null),this._configDefaultRenderer("auto")}async updateRenderer(){const{loaded:e,symbolizer:t}=this;if(!e||!t||!this.renderer)return;const{rasterInfo:r}=this.raster,i=v(r,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),s=i?.name,n=z({...this.renderer.toJSON(),variableName:s});if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(n))return;const o=this._rasterJobHandler.instance;o&&(t.rasterInfo=C(r,s),t.rendererJSON=n,t.bind(),await o.updateSymbolizer(t),this._cachedRendererJson=n)}async applyRenderer(e,t){const r=e?.pixelBlock;if(!(null!=r&&r.pixels&&r.pixels.length>0))return null;let i;await this.updateRenderer();const s=this._rasterJobHandler.instance,n=this.bandIds??[];return i=s?await s.symbolize({...e,simpleStretchParams:t,bandIds:n}):this.symbolizer.symbolize({...e,simpleStretchParams:t,bandIds:n}),i}getTileUrl(e,t,r){return"RasterTileServer"===this.raster.datasetFormat?`${this.url}/tile/${e}/${t}/${r}`:""}getCompatibleTileInfo(e,t,r=!1){if(!this.loaded||null==t)return null;if(r&&e.equals(this.spatialReference))return this.tileInfo;const i=d(e);return R.create({size:256,spatialReference:e,origin:i?{x:i.origin[0],y:i.origin[1]}:{x:t.xmin,y:t.ymax}})}getCompatibleFullExtent(e){return this.loaded?(this._compatibleFullExtent?.spatialReference.equals(e)||(this._compatibleFullExtent=this.raster.computeExtent(e)),this._compatibleFullExtent):null}async fetchTile(e,t,r,i={}){if(G(this),i.requestAsImageElement){const n=this.getTileUrl(e,t,r);return s(n,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:i.signal}).then((e=>e.data))}const{serviceRasterInfo:n}=this;if(null!=n.multidimensionalInfo&&null==(i=this.normalizeRasterFetchOptions(i)).multidimensionalDefinition){const s=i.tileInfo||n.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(e,t,r,s),pixelBlock:null}}return await this._initJobHandler(),await this.updateRasterFunction(),"raster-shaded-relief"===this.renderer?.type&&(i={...i,buffer:{cols:1,rows:1}}),this.raster.fetchTile(e,t,r,i)}async fetchPixels(e,t,r,i={}){return null!=this.serviceRasterInfo.multidimensionalInfo&&null==(i=this.normalizeRasterFetchOptions(i)).multidimensionalDefinition?{extent:e,pixelBlock:null}:(await this._initJobHandler(),await this.updateRasterFunction(),t=Math.round(t),r=Math.round(r),this.raster.fetchPixels(e,t,r,i))}async identify(e,t={}){await this.load();const{raster:r,serviceRasterInfo:i}=this;if(null!=i?.multidimensionalInfo){if(!(i.hasMultidimensionalTranspose&&!!(_(t.multidimensionalDefinition)||t.transposedVariableName||t.timeExtent))&&null==(t=this.normalizeRasterFetchOptions(t)).multidimensionalDefinition)return{location:e,value:null}}const s=this.multidimensionalSubset?.areaOfInterest;if(s&&!s.contains(e))throw new o("imagery-tile-mixin:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");return r.identify(e,t)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){const e=this.serviceRasterInfo?.multidimensionalInfo;if(null==e||"standard-time"!==this.serviceRasterInfo?.dataType)return!1;const t=this.multidimensionalDefinition,r=t?.[0]?.variableName;return e.variables.some((e=>e.name===r&&(!t?.[0].dimensionName||e.dimensions.some((e=>"StdTime"===e.name)))))}getStandardTimeValue(e){return new Date(24*(e-25569)*3600*1e3).toString()}getMultidimensionalSubsetVariables(e){const t=e??this.serviceRasterInfo?.multidimensionalInfo;return S(this.multidimensionalSubset,t)}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=I(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this.rasterFunction&&"Function"===this.raster.datasetFormat&&(this._cachedRasterFunctionJson=this.rasterFunction.toJSON()),this._configDefaultRenderer()}_initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new g;return this._rasterJobHandler.connectionPromise=e.initialize().then((async()=>{G(this),this._rasterJobHandler.instance=e,this.raster.rasterJobHandler=e,"Function"===this.raster.datasetFormat&&this.raster.syncJobHandler(),this.rasterFunction&&await this.updateRasterFunction().catch((()=>{})),this.renderer&&this.updateRenderer()})).catch((()=>{})),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null,this.raster&&(this.raster.rasterJobHandler=null)}_configDefaultInterpolation(){if(null==this.interpolation){G(this);const{raster:e}=this,t=P(e.rasterInfo,e.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",t)}}_configDefaultRenderer(e="no"){G(this);const{rasterInfo:t}=this.raster;!this.bandIds&&t.bandCount>1&&(this.bandIds=E(t));const r=v(t,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),i=r?.name,s=A(this.raster);if(!this.renderer||"override"===e){const e=M(t,{bandIds:this.bandIds,variableName:i,rasterFunctionColorRamp:s}),r=t.statistics,n=r&&r.length>0?r[0]:null,o=n?.max??0,a=n?.min??0;"WCSServer"===this.raster.datasetFormat&&"raster-stretch"===e.type&&(o>1e24||a<-1e24)&&(e.dynamicRangeAdjustment=!0,e.statistics=null,"none"===e.stretchType&&(e.stretchType="min-max")),this.renderer=e}const n=z({...this.renderer.toJSON(),variableName:i}),o=C(t,i);this.symbolizer?(this.symbolizer.rendererJSON=n,this.symbolizer.rasterInfo=o):this.symbolizer=new U({rendererJSON:n,rasterInfo:o});const l=this.symbolizer.bind();if(l.success){if("auto"===e){const{colormap:e}=this.raster.rasterInfo,t=this.renderer;if(null!=e&&"raster-colormap"===t.type){const e=M(this.raster.rasterInfo);JSON.stringify(e)!==JSON.stringify(t)&&this._configDefaultRenderer("override")}else if("raster-stretch"===t.type){const e=this.bandIds?.length,r=t.statistics?.length;!t.dynamicRangeAdjustment&&r&&e&&r!==e&&this._configDefaultRenderer("override")}}}else a.getLogger(this).warn("imagery-tile-mixin",l.error||"The given renderer is not supported by the layer."),"auto"===e&&this._configDefaultRenderer("override")}};function G(e){if(!e.raster||!e.serviceRasterInfo)throw new o("imagery-tile","no raster")}return e([l({clonable:!1})],$.prototype,"_cachedRendererJson",void 0),e([l({clonable:!1})],$.prototype,"_cachedRasterFunctionJson",void 0),e([l({clonable:!1})],$.prototype,"_compatibleFullExtent",void 0),e([l({clonable:!1})],$.prototype,"_isConstructedFromFunctionRaster",void 0),e([l({clonable:!1})],$.prototype,"_rasterJobHandler",void 0),e([l()],$.prototype,"bandIds",void 0),e([l({json:{origins:{service:{read:{source:"copyrightText"}}}}})],$.prototype,"copyright",void 0),e([l({json:{read:!1}})],$.prototype,"fullExtent",null),e([l()],$.prototype,"interpolation",void 0),e([l()],$.prototype,"ioConfig",void 0),e([l({type:[f],json:{write:!0}})],$.prototype,"multidimensionalDefinition",null),e([l({type:y,json:{write:!0}})],$.prototype,"multidimensionalSubset",void 0),e([l()],$.prototype,"raster",void 0),e([l({type:b,json:{name:"renderingRule",write:!0}})],$.prototype,"rasterFunction",null),e([l({readOnly:!0})],$.prototype,"rasterInfo",null),e([l()],$.prototype,"serviceRasterInfo",void 0),e([l()],$.prototype,"sourceJSON",void 0),e([l({readOnly:!0,type:B,json:{read:!1}})],$.prototype,"spatialReference",void 0),e([l({type:R})],$.prototype,"tileInfo",void 0),e([l(p)],$.prototype,"url",null),e([l({types:t,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){const e="raster-stretch"===this.renderer?.type&&"none"===this.renderer.stretchType&&!this.renderer.useGamma;return{enabled:!this.loaded||"Raster"===this.raster.tileType||!e}}},origins:{"web-scene":{types:r,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type&&"flow"!==e.type})}}}}})],$.prototype,"renderer",null),e([c("renderer")],$.prototype,"readRenderer",null),e([l({clonable:!1})],$.prototype,"symbolizer",void 0),$=e([m("esri.layers.mixins.ImageryTileMixin")],$),$};export{V as ImageryTileMixin};
