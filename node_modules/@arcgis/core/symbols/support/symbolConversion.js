/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{isSymbol3D as o}from"../../symbols.js";import e from"../../core/Error.js";import{defaultRendererPolygonSymbol3D as r,defaultRendererPolylineSymbol3D as l}from"./defaults3D.js";import m from"../WebStyleSymbol.js";import i from"../PointSymbol3D.js";import n from"../SimpleLineSymbol.js";import s from"../LineSymbol3D.js";import t from"../SimpleMarkerSymbol.js";import y from"../PictureMarkerSymbol.js";import b from"../SimpleFillSymbol.js";import a from"../MeshSymbol3D.js";import f from"../PolygonSymbol3D.js";import p from"../TextSymbol.js";import c from"../LabelSymbol3D.js";const S={retainId:!1,ignoreDrivers:!1,hasLabelingContext:!0};function g(g,u=S){if(!g)return{symbol:null};const{retainId:d=S.retainId,ignoreDrivers:D=S.ignoreDrivers,hasLabelingContext:j=S.hasLabelingContext,retainCIM:M=S.retainCIM,cimFallbackEnabled:C=S.cimFallbackEnabled}=u;let I=null;if(o(g)||g instanceof m)I=g.clone();else if("cim"===g.type){const o=g.data?.symbol?.type;switch(o){case"CIMPointSymbol":I=M?g.clone():i.fromCIMSymbol(g);break;case"CIMLineSymbol":C&&(I=l.clone(),u?.logWarning?.("Unsupported CIM line symbology converted to fallback 3D line symbology"));break;case"CIMPolygonSymbol":C&&(I=r.clone(),u?.logWarning?.("Unsupported CIM polygon symbology converted to fallback 3D polygon symbology"))}if(!I)return{error:new e("symbol-conversion:unsupported-cim-symbol",`CIM symbol of type '${o||"unknown"}' is unsupported in 3D`,{symbol:g})}}else if(g instanceof n)I=s.fromSimpleLineSymbol(g);else if(g instanceof t)I=i.fromSimpleMarkerSymbol(g);else if(g instanceof y)I=i.fromPictureMarkerSymbol(g);else if(g instanceof b)I=u.geometryType&&"mesh"===u.geometryType?a.fromSimpleFillSymbol(g):f.fromSimpleFillSymbol(g);else{if(!(g instanceof p))return{error:new e("symbol-conversion:unsupported-2d-symbol",`2D symbol of type '${g.type||g.declaredClass}' is unsupported in 3D`,{symbol:g})};I=j?c.fromTextSymbol(g):i.fromTextSymbol(g)}return d&&I&&"cim"!==I.type&&(I.id=g.id),D&&o(I)&&I.symbolLayers.forEach((o=>o.ignoreDrivers=!0)),{symbol:I}}export{S as defaultTo3DOptions,g as to3D};
