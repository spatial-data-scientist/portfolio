/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as o}from"../../../../chunks/tslib.es6.js";import{formatAngle as r}from"../../../../core/quantityFormatUtils.js";import{createAngle as t}from"../../../../core/quantityUtils.js";import{property as i}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/has.js";import"../../../../core/Logger.js";import"../../../../core/RandomLCG.js";import{subclass as s}from"../../../../core/accessorSupport/decorators/subclass.js";import{makeQuantityParser as e}from"./parsingAndFormattingUtils.js";import{TooltipField as n}from"./TooltipField.js";import{getNormalizedGeographicOrientation as a}from"../../../support/angularMeasurementUtils.js";let p=class extends n{constructor(o){super(o),this.precision=1}normalizeCtorArgs(o){const i=o=>o.inputUnitInfos.orientation.unit;return{name:"orientation",actual:null,parse:e(((o,r)=>t(o,i(r),"geographic"))),format:o=>{const t=a(o);return r(t,"geographic",this.precision)},formatForInputMode:(o,r)=>{const t=a(o);return r.formatters.scalar(t)},suffix:o=>o.inputUnitInfos.orientation.abbreviation,title:o=>o.messages.sketch.orientation,...o}}};o([i()],p.prototype,"precision",void 0),p=o([s("esri.views.interactive.tooltip.fields.TooltipFieldOrientation")],p);export{p as TooltipFieldOrientation};
