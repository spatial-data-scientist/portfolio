/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import r from"../../../Graphic.js";import t from"../../../core/Accessor.js";import{groupToMap as s}from"../../../core/arrayUtils.js";import i from"../../../core/Collection.js";import{handlesGroup as o}from"../../../core/handleUtils.js";import n from"../../../core/Logger.js";import{abortMaybe as l}from"../../../core/maybe.js";import{isAbortError as a,allSettledValues as u,throwIfAborted as p,createResolver as h}from"../../../core/promiseUtils.js";import{watch as c,syncAndInitial as y}from"../../../core/reactiveUtils.js";import{property as d}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import{subclass as g}from"../../../core/accessorSupport/decorators/subclass.js";import"../../../layers/buildingSublayers/BuildingGroupSublayer.js";import f from"./BuildingComponentSublayerView3D.js";import{BuildingSublayerView3DMixin as m}from"./BuildingSublayerView3D.js";import{LayerView3D as b}from"./LayerView3D.js";import{parseFilterMode as w}from"./i3s/BuildingFilterUtil.js";import{checkSpatialReference as V}from"./i3s/I3SUtil.js";import{updatingProgress as j}from"../support/updatingProperties.js";import C from"../../layers/BuildingSceneLayerView.js";import{isInEffectiveScaleRange as S}from"../../support/layerViewUtils.js";const _=m(t);let v=class extends(b(C)){constructor(e){super(e),this.type="building-scene-3d",this.sublayerViews=new i,this._abortController=new AbortController,this._loadingComponents=0,this._pendingWhenSublayerViews=new Map,this.ignoresMemoryFactor=!1}get filterExpression(){const e=this.layer.activeFilterId,r=null!=e?this.layer.filters.find((r=>r.id===e)):null,t=null!=r?r.filterBlocks?.find((e=>"solid"===e.filterMode.type)):null;return t?t.filterExpression:null}get filterExpressions(){const e=this.layer.activeFilterId,r=null!=e?this.layer.filters.find((r=>r.id===e)):null;return r?.filterBlocks?r.filterBlocks.toArray().map((e=>[e.filterExpression??"",w(e)])):[]}get updatingProgressValue(){const e=this.sublayerViews,r=this._loadingComponents+(e?e.length:0);return e.reduce(((e,r)=>e+r.updatingProgress),0)/r}get visibleAtCurrentScale(){return S(this.layer.effectiveScaleRange,this.view.terrainScale)}isUpdating(){return this._loadingComponents>0||this.sublayerViews&&this.sublayerViews.some((e=>e.updating))}initialize(){V(this.layer.spatialReference,this.view.spatialReference,this.view.viewingMode),this._initializeSubLayerViews(this.layer.sublayers,this)}destroy(){this.sublayerViews&&(this.sublayerViews.forEach((e=>e.destroy())),this.sublayerViews=null),this._abortController=l(this._abortController)}_initializeSubLayerViews(e,r){const t=this,s=this.view;e.forEach((e=>{if(!e.isEmpty)if("building-group"===e.type){const t=new _({sublayer:e,view:s,parent:r});this._initializeSubLayerViews(e.sublayers,t)}else"mesh"===e.geometryType&&(this._loadingComponents++,e.load({signal:this._abortController.signal}).then((()=>{const i=new f({sublayer:e,layerView:t,view:s,parent:r});this.sublayerViews.push(i);const o=this._pendingWhenSublayerViews.get(e);if(o){for(const e of o)e.resolve(i);this._pendingWhenSublayerViews.delete(e)}this.addHandles([c((()=>i.updating),(()=>this.notifyChange("updating")),y),c((()=>i.updatingProgress),(()=>this.notifyChange("updatingProgressValue")),y)])})).catch((r=>{a(r)||n.getLogger(this).error(`Error while creating view for sublayer ${e.id}\nLayer: ${this.layer.url}\n`,r)})).then((()=>{this._loadingComponents--,this.notifyChange("updating"),this.notifyChange("updatingProgressValue")})))}))}getGraphicFromIntersectorTarget(e){for(const r of this.sublayerViews.items)if(r.sublayer.uid===e.sublayerUid)return r.getGraphicFromIntersectorTarget(e);return null}async fetchPopupFeaturesFromGraphics(e,r){if(0===e.length)return[];const t=s(e,(e=>e.sourceLayer)),i=[];for(const[s,n]of t){const e=this._findComponent(s);null!=e&&i.push(e.fetchPopupFeaturesFromGraphics(n,r))}const o=await u(i);return p(r),o.flat()}whenGraphicBounds(e){const r=this._findComponent(e.sourceLayer);return null==r?Promise.reject():r.whenGraphicBounds(e)}getAABBFromIntersectorTarget(e){for(const r of this.sublayerViews.items)if(r.sublayer.uid===e.sublayerUid)return r.getAABBFromIntersectorTarget(e);return null}async whenSublayerView(e){const r=this._findComponent(e);if(null!=r)return r;const t=this._pendingWhenSublayerViews.get(e),s=h();return t?t.push(s):this._pendingWhenSublayerViews.set(e,[s]),s.promise}_findComponent(e){return this.sublayerViews.find((r=>e===r.sublayer))}highlight(e){e instanceof r?e=[e]:e instanceof i&&(e=e.toArray());const t=[];if(Array.isArray(e)&&e.length>0&&e[0]instanceof r){const r=e,s=new Map;for(const e of r){let r=s.get(e.sourceLayer);null==r&&(r=[],s.set(e.sourceLayer,r)),r.push(e)}this.sublayerViews.forEach((e=>{const r=s.get(e.sublayer);r&&t.push(e.highlight(r))}))}return o(t)}get usedMemory(){return this.sublayerViews.reduce(((e,r)=>e+r.usedMemory),0)}get unloadedMemory(){return this.sublayerViews.reduce(((e,r)=>e+r.unloadedMemory),0)}};e([d()],v.prototype,"sublayerViews",void 0),e([d({readOnly:!0})],v.prototype,"filterExpression",null),e([d({readOnly:!0})],v.prototype,"filterExpressions",null),e([d(j)],v.prototype,"updatingProgress",void 0),e([d({readOnly:!0,dependsOn:[]})],v.prototype,"updatingProgressValue",null),e([d({readOnly:!0})],v.prototype,"visibleAtCurrentScale",null),v=e([g("esri.views.3d.layers.BuildingSceneLayerView3D")],v);const B=v;export{B as default};
