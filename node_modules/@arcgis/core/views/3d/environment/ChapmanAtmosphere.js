/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{unitRGBAFromColor as e}from"../../../core/colorUtils.js";import t from"../../../core/Handles.js";import{clamp as s,lerp as i,smoothstep as r}from"../../../core/mathUtils.js";import{watch as a,syncAndInitial as o}from"../../../core/reactiveUtils.js";import{set as n}from"../../../core/libs/gl-matrix-2/math/vec2.js";import{s as h,l as m,q as c}from"../../../chunks/vec32.js";import{s as u}from"../../../chunks/vec42.js";import{ZEROS as d}from"../../../core/libs/gl-matrix-2/factories/vec4f64.js";import{earth as p}from"../../../geometry/support/Ellipsoid.js";import{AtmosphereType as l}from"./AtmosphereType.js";import{atmosphereHeight as _,innerAtmosphereDepth as T,computeInnerAltitudeFade as f}from"./atmosphereUtils.js";import{ChapmanAtmospherePassParameters as b,ChapmanAtmosphereTechnique as g}from"./ChapmanAtmosphereTechnique.js";import{ChapmanAtmosphereTechniqueConfiguration as q}from"./ChapmanAtmosphereTechniqueConfiguration.js";import{ColorFormat as v}from"../webgl/formats.js";import{Pos2Tex as w}from"../webgl-engine/lib/DefaultVertexBufferLayouts.js";import{createQuadVAO as P}from"../webgl-engine/lib/glUtil3D.js";import{applyTextureResizeModulo as x}from"../webgl-engine/lib/textureUtils.js";import{A as R}from"../../../chunks/AtmosphereCompositing.glsl.js";import{AtmosphereCompositingTechnique as j}from"../webgl-engine/shaders/AtmosphereCompositingTechnique.js";import{PrimitiveType as E}from"../../webgl/enums.js";import z from"../../../webscene/background/ColorBackground.js";class B{constructor(s,i){this._view=s,this._context=i,this.type=l.Realistic,this._handles=new t,this._compositingPassParameters=new R,this._passParameters=new b,this._rootTileElevationMin=NaN,this._lowerBoundEarthRadius=p.radius,this._fadeHaze=0,this._updateRadius(p.radius);const r=this._context.renderContext.rctx;this._updateRootTileElevationBounds(),this._handles.add([a((()=>this._view?.basemapTerrain?.rootTileElevationBounds),(()=>this._view?.basemapTerrain?this._updateRootTileElevationBounds():null)),a((()=>this._view?.basemapTerrain?.visibleElevationBounds),(()=>this._view?.basemapTerrain?this._updateVisibleElevationBounds():null)),a((()=>this._view?.environment.background),(t=>{const s=t instanceof z?e(t.color):d;h(this._passParameters.backgroundColor,s[0]*s[3],s[1]*s[3],s[2]*s[3])}),o)]);const n=new q;n.haze=!1,this._atmosphereTechnique=this._context.techniques.acquire(g,n),this._compositingTechnique=this._context.techniques.acquire(j,n),n.haze=!0,this._atmosphereHazeTechnique=this._context.techniques.acquire(g,n),this._compositingHazeTechnique=this._context.techniques.acquire(j,n),n.reduced=!0,n.haze=!1,this._atmosphereReducedTechnique=this._context.techniques.acquire(g,n),n.haze=!0,this._atmosphereHazeReducedTechnique=this._context.techniques.acquire(g,n),this._vao=P(r,w)}destroy(){this._handles.destroy(),this._compositingTechnique.release(),this._compositingHazeTechnique.release(),this._atmosphereTechnique.release(),this._atmosphereHazeTechnique.release(),this._atmosphereReducedTechnique.release(),this._atmosphereHazeReducedTechnique.release(),this._vao.dispose()}render(e,t){this._render(e,t?this._atmosphereTechnique:this._atmosphereReducedTechnique,t,!1)}renderHaze(e,t,s){this._fadeHaze=t,this._render(e,s?this._atmosphereHazeTechnique:this._atmosphereHazeReducedTechnique,s,!0)}_render(e,t,s,r){const a=e.bindParameters.mainDepth;if(!a)return;this._update(e.bindParameters.camera),this._passParameters.depthTexture=a;const o=e.rctx.bindTechnique(t,e.bindParameters,this._passParameters),n=e.offscreenRenderingHelper;if(s)n.renderDepthDetached((()=>this._renderCommon(o,e)));else{const t=e.rctx.getViewport(),s=m(e.bindParameters.camera.eye)-p.radius;let h;if(s<_){const e=Math.min(1,Math.max(0,s/_));h=r?i(.4,.5,e):i(.2,.3,e)}else{const e=Math.min(1,Math.max(0,(s-_)/(15*_)));h=r?i(.5,1,e):i(.3,.6,e)}const c=x(Math.round(h*e.bindParameters.camera.fullViewport[2])),u=x(Math.round(h*e.bindParameters.camera.fullViewport[3]));e.rctx.setViewport(0,0,c,u);const d=n.renderToCachedFBO(null,r?"chapman haze":"chapman",(()=>this._renderCommon(o,e)),[0,0,0,1],v.RGBA,null,c,u);e.rctx.setViewport(t.x,t.y,t.width,t.height),this._compositingPassParameters.color=d.getTexture(),this._compositingPassParameters.depth=a;const l=r?this._compositingHazeTechnique:this._compositingTechnique;e.rctx.bindTechnique(l,e.bindParameters,this._compositingPassParameters),n.renderDepthDetached((()=>e.rctx.screen.draw())),d.release()}}_renderCommon(e,t){null!=this._vao&&(t.rctx.bindVAO(this._vao),e.assertCompatibleVertexAttributeLocations(this._vao),t.rctx.drawArrays(E.TRIANGLE_STRIP,0,4))}_updateRootTileElevationBounds(){const e=this._view.basemapTerrain.rootTileElevationBounds.min;e!==this._rootTileElevationMin&&(this._rootTileElevationMin=e,this._lowerBoundEarthRadius=p.radius,this._updateVisibleElevationBounds())}_updateVisibleElevationBounds(){const e=H(p.radius+this._view.basemapTerrain.visibleElevationBounds.min);e<this._lowerBoundEarthRadius&&this._updateRadius(e)}_updateRadius(e){this._lowerBoundEarthRadius=e,n(this._passParameters.radii,e,e+_),this._passParameters.innerFadeDistance=2*Math.sqrt((2*e-T)*T)}_update(e){if(!e)return;const t=c(e.eye),a=Math.sqrt(t),o=t-this._passParameters.radii[1]*this._passParameters.radii[1],n=s((a-this._passParameters.radii[0])/_,0,1);u(this._passParameters.heightParameters,a,t,o,n),this._passParameters.altitudeFade=f(a-this._lowerBoundEarthRadius),this._passParameters.hazeStrength=i(i(.6,1,r(9500,10500,a-p.radius)),1,this._fadeHaze)}}function H(e){return e*Math.cos(Math.PI/16/16)}export{B as ChapmanAtmosphere};
