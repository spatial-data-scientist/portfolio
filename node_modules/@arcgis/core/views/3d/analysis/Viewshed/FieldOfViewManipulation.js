/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import t from"../../../../Color.js";import e from"../../../../core/Handles.js";import{handlesGroup as i}from"../../../../core/handleUtils.js";import{deg2rad as r,clamp as a}from"../../../../core/mathUtils.js";import{destroyMaybe as o}from"../../../../core/maybe.js";import{watch as n,initial as s}from"../../../../core/reactiveUtils.js";import{fromYRotation as l,fromXRotation as c,fromScaling as u,fromZRotation as p,fromTranslation as h,fromRotation as m,multiply as f}from"../../../../core/libs/gl-matrix-2/math/mat4.js";import{create as d}from"../../../../core/libs/gl-matrix-2/factories/mat4f64.js";import{s as _,z as v}from"../../../../chunks/vec32.js";import{fromValues as M,create as b}from"../../../../core/libs/gl-matrix-2/factories/vec3f64.js";import{f as g}from"../../../../chunks/boundedPlane.js";import{angleOpenThreshold as w,fovFocusedArcWidth as j,fovUnfocusedArcWidth as A}from"./viewshedToolConfig.js";import{screenToCircleAngle as O,getViewshedRotationMatrix as V,computeOffsetScale as y}from"./viewshedToolUtils.js";import{Manipulator3D as T}from"../../interactive/Manipulator3D.js";import{RenderObject as E}from"../../interactive/RenderObject.js";import{ManipulatorType as F}from"../../interactive/editingTools/ManipulatorType.js";import{Manipulation as U}from"../../interactive/editingTools/manipulations/Manipulation.js";import{createPolylineGeometry as R}from"../../webgl-engine/lib/GeometryUtil.js";import{RenderOccludedFlag as S}from"../../webgl-engine/lib/Material.js";import{assert as x}from"../../webgl-engine/lib/Util.js";import{RibbonLineMaterial as z}from"../../webgl-engine/materials/RibbonLineMaterial.js";import{createManipulatorDragEventPipeline as D}from"../../../interactive/dragEventPipeline.js";import{ManipulatorStateFlags as I}from"../../../interactive/interfaces.js";class P extends U{constructor(t){super(),this._handles=new e,this._interactive=!0,this._tool=t.tool,this._view=t.view,this._focusedArcMaterial=this._createArcMaterial(!0),this._unfocusedArcMaterial=this._createArcMaterial(!1),this._createManipulators(),this.forEachManipulator((t=>this._tool.manipulators.add(t)))}destroy(){this._handles=o(this._handles),this.forEachManipulator((t=>{this._tool.manipulators.remove(t),t.destroy()})),this._tool=null,this._view=null,this._manipulators=null}get interactive(){return this._interactive}set interactive(t){this._interactive!==t&&(this._interactive=t,this._updateManipulatorInteractivity())}createDragPipeline(t,e){const r=Object.values(this._manipulators);return i(r.map((({manipulator:i,side:r})=>D(i,((i,a,o,n,s)=>{const l=H(r,e);B(r)?e.horizontalFieldOfView:e.verticalFieldOfView;const c=a.next((t=>({...t,manipulatorType:F.SCALE,side:r}))),u=O(c,this._view,l);t(i,u,o)})))))}updateManipulatorsTransform(t){this._forEachManipulatorInfo((e=>this._updateArcManipulatorTransform(e,t)))}updateManipulatorVisuals(t){this._forEachManipulatorInfo((e=>this._updateArcManipulatorVisuals(e,t)))}_updateArcManipulatorVisuals({manipulator:t,side:e},i){const r=[];if(null!=i){if("left"===e&&(i.horizontalFieldOfView<w||i.horizontalFieldOfView>360-w)||"bottom"===e&&i.verticalFieldOfView<w)return t.renderObjects=[],void(t.collisionType={type:"line",paths:[]});const[a,o]=C(e,i,this._unfocusedArcMaterial);r.push(new E(a,I.Unfocused),new E(a.instantiate({material:this._focusedArcMaterial}),I.Focused)),t.collisionType={type:"line",paths:[o]}}t.renderObjects=r,t.radius=10}_updateArcManipulatorTransform({manipulator:t,side:e},i){const a=i.horizontalFieldOfView,o=r(i.verticalFieldOfView/2),n=r(a/2),s=B(e);t.location=i.observer;const M=d(),b=t=>{f(M,t,M)};b(l(J,r(-90))),s||b(c(J,o));const g=i.farDistanceRenderSpace;b(u(J,_(K,g,g,g))),b(p(J,k(e))),b(V(i,J));const w=v(K,i.targetRenderSpace,i.observerRenderSpace);let j,A;if(b(h(J,w)),s){if(j=n,A=i.tiltedUpVector,0!==a&&360!==a){const t=y(i,this._view);j+=2*Math.tan(t/(2*i.farDistance))}}else A=i.rightVector,j=o;j*="right"===e||"bottom"===e?-1:1;const O=m(J,j,A);null!=O&&b(O),t.modelTransform=M}_updateManipulatorInteractivity(){const t=this.grabbing;this.forEachManipulator((e=>{e.interactive=!t&&this.interactive||e.grabbing}))}_createManipulators(){const t=this._createArcManipulator("left"),e=this._createArcManipulator("right"),i=this._createArcManipulator("top"),r=this._createArcManipulator("bottom");this._manipulators={left:t,right:e,top:i,bottom:r};const a=[[r.manipulator,i.manipulator],[t.manipulator,e.manipulator]];a.push(...a.map((([t,e])=>[e,t]))),this._handles.add(a.map((([t,e])=>t.events.on("focus-changed",(t=>{const i="focus"===t.action;e.hovering=i})))))}_createArcManipulator(t){const e={manipulator:new T({view:this._view,autoScaleRenderObjects:!1,worldSized:!0}),side:t};return this._updateArcManipulatorVisuals(e),e}_createArcMaterial(e){const i=e?j:A,r=new z({renderOccluded:S.OccludeAndTransparent,isDecoration:!0,width:i});return this._handles.add(n((()=>t.toUnitRGBA(this._view.effectiveTheme.accentColor)),(t=>r.setParameters({color:t})),s)),r}forEachManipulator(t){Object.values(this._manipulators).forEach((({manipulator:e})=>t(e,F.SCALE)))}_forEachManipulatorInfo(t){Object.values(this._manipulators).forEach((e=>t(e)))}}function C(t,e,i){const{horizontalFieldOfView:o,verticalFieldOfView:n}=e,s=B(t),l=r(a((s?n:o)/2,0,15)),c=s?1:Math.max(Math.sin(r(90-n/2)),.1),u=G(-l/2,l/2,c,[-c,0,0]);return[R(i,u),u]}function G(t,e,i,r=[0,0,0],a=10){x(a>1,"createArcPolylineGeometry() needs at least 2 for numVertices");const o=e-t,[n,s,l]=r;if(o<=0||i<=0){const t=.001;return[M(n,s,l+t),M(n,s,s+-t)]}const c=[],u=o/a;for(let p=0;p<a;p++){let r=t+p*u;p===a-1&&(r=e);const o=Math.cos(r)*i,h=Math.sin(r)*i,m=M(o+n,s,h+l);c.push(m)}return c}function L(t){switch(t){case"left":return 0;case"bottom":return 1;case"right":return 2;case"top":return 3}}function k(t){return L(t)*q}function B(t){return"left"===t||"right"===t}function H(t,{observerRenderSpace:e,targetDirection:i,tiltedUpVector:r,rightVector:a}){const o=B(t)?a:r;return g(e,i,o)}const q=Math.PI/2,J=d(),K=b();export{P as FieldOfViewManipulation,G as createArcPolylineVertices,B as isSideHorizontal,k as sideToRad};
