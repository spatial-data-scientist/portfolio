/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import t from"../../../../core/Collection.js";import{deg2rad as i}from"../../../../core/mathUtils.js";import{destroyMaybe as s}from"../../../../core/maybe.js";import{watch as r,syncAndInitial as o}from"../../../../core/reactiveUtils.js";import{property as a}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/has.js";import"../../../../core/Logger.js";import"../../../../core/RandomLCG.js";import{subclass as n}from"../../../../core/accessorSupport/decorators/subclass.js";import{translate as h,fromTranslation as d,scale as c,mul as l}from"../../../../core/libs/gl-matrix-2/math/mat4.js";import{create as u}from"../../../../core/libs/gl-matrix-2/factories/mat4f64.js";import{z as p}from"../../../../chunks/vec32.js";import{create as m,fromValues as w}from"../../../../core/libs/gl-matrix-2/factories/vec3f64.js";import{ShaderOutput as f}from"../core/shaderLibrary/ShaderOutput.js";import{SyncRenderPlugin as _,ConsumesDepth as v,ConsumesNone as g}from"../effects/RenderPlugin.js";import{RenderSlot as x}from"./RenderSlot.js";import{ViewshedShadowMap as b}from"./ViewshedShadowMap.js";import{V as j}from"../../../../chunks/Viewshed.glsl.js";import{ViewshedTechnique as M}from"../shaders/ViewshedTechnique.js";import{ViewshedTechniqueConfiguration as S}from"../shaders/ViewshedTechniqueConfiguration.js";let C=class extends _{get viewshedShadowMap(){return this._viewshedShadowMap}get enabled(){return this._viewsheds.length>0}constructor(e,i){super(e),this._pluginContext=null,this.renderHighQuality=!1,this._parameters=new j,this._configuration=new S,this._viewsheds=new t,this.produces=new Map([[x.VIEWSHED,()=>!0]]),this._renderShadowMap=i}initialize(){this.addHandles(r((()=>this.view.qualitySettings.maximumPixelRatio),(e=>this._maximumPixelRatio=e),o))}destroy(){this.uninitializeRenderContext()}consumes(){return this.enabled?v:g}initializeRenderContext(e){this._pluginContext=e,this._viewshedShadowMap=new b(this.fboCache),this._viewshedShadowMap.enabled=!0}renderNode(e,t,i){const{bindParameters:s,rctx:r}=e;if(!this.enabled||!s.depth||null==i)return;const o=this._setupNormals(i);if(null!=this._technique&&this._configuration.useNormalMap===o||(this._configuration.useNormalMap=o,this._technique=this._pluginContext?.techniques.acquire(M,this._configuration)),this._technique?.compiled)for(const a of this._viewsheds){const t=e.rctx.getBoundFramebufferObject(),i=this._renderViewshedShadowCubeMap(s,a),o=this._viewshedShadowMap;i&&null!=o.depthTexture&&!o.isTextureZero&&(this._setPassParameters(a),e.rctx.bindFramebuffer(t),r.bindTechnique(this._technique,s,this._parameters),r.screen.draw())}else this._pluginContext?.requestRender()}uninitializeRenderContext(){this._pluginContext=null,this._viewshedShadowMap.dispose(),this._technique=s(this._technique)}updateViewsheds(e){const i=e.removes;null!=i&&(t.isCollection(i)?this._viewsheds.removeMany(i):this._viewsheds.remove(i));const s=e.adds;if(null!=s)if(t.isCollection(s)){const e=s.filter((e=>!this._viewsheds.includes(e)));this._viewsheds.addMany(e)}else this._viewsheds.includes(s)||this._viewsheds.add(s)}_renderViewshedShadowCubeMap(e,t){const i=this._viewshedShadowMap;if(!i.enabled)return!1;const s=i.start(e.camera,t,this.renderHighQuality,this._maximumPixelRatio);if(s)for(const r of i.faces)this._renderShadowMap(e,r,f.ViewshedShadow);return i.finish(),s}_setPassParameters(e){const t=this._parameters,s=this._viewshedShadowMap,r=e.observerRenderSpace;t.localOrigin=r,t.fovs=[i(e.horizontalFieldOfView),i(e.verticalFieldOfView)],t.headingAndTilt=[i(e.heading),i(e.tiltParallelToSurface)],t.upVector=e.tiltedUpVector;const o=V(e.targetRenderSpace,r);t.targetVector=o,t.shadowMap=s;const a=[],n=[];for(let i=0;i<s.numActiveFaces;i++)h(y,s.viewshedViewMatrices[i],r),a.push(...y.flat()),q(s.viewshedProjectionMatrices[i],y,R),n.push(...R.flat());t.viewMatrices=a,t.projectionMatrices=n}_setupNormals(e){const t=e.get("normals"),i=t?.getTexture();return this._parameters.normalTexture=i,null!=i}get test(){return{viewsheds:this._viewsheds}}};function V(e,t){const i=m();return p(i,e,t)}function q(e,t,i){const s=w(.5,.5,.5);return d(i,s),c(i,i,s),l(i,i,e),l(i,i,t),i}e([a()],C.prototype,"_pluginContext",void 0),e([a()],C.prototype,"fboCache",void 0),e([a()],C.prototype,"view",void 0),e([a()],C.prototype,"viewshedShadowMap",null),C=e([n("esri.views.3d.webgl-engine.lib.Viewshed")],C);const y=u(),R=u();export{C as Viewshed};
