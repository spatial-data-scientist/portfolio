/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{addNearFar as o}from"../ForwardLinearDepth.glsl.js";import{ShaderOutput as e}from"../ShaderOutput.js";import{SliceDraw as r}from"../Slice.glsl.js";import{Transform as i}from"../Transform.glsl.js";import{NormalAttribute as t,NormalType as a}from"../attributes/NormalAttribute.glsl.js";import{ObjectAndLayerIdColor as s}from"../attributes/ObjectAndLayerIdColor.glsl.js";import{TextureCoordinateAttribute as d}from"../attributes/TextureCoordinateAttribute.glsl.js";import{VertexNormal as l}from"../attributes/VertexNormal.glsl.js";import{OutputDepth as n}from"../output/OutputDepth.glsl.js";import{OutputHighlight as c}from"../output/OutputHighlight.glsl.js";import{VisualVariables as u}from"../shading/VisualVariables.glsl.js";import{DiscardOrAdjustAlphaPass as p}from"../util/AlphaDiscard.glsl.js";import{addProjViewLocalOrigin as v}from"../util/View.glsl.js";import{glsl as m}from"../../shaderModules/interfaces.js";import{Texture2DPassUniform as f}from"../../shaderModules/Texture2DPassUniform.js";import{AlphaDiscardMode as g}from"../../../lib/basicInterfaces.js";function x(x,h){const{vertex:j,fragment:O}=x,w=h.hasColorTexture&&h.alphaDiscardMode!==g.Opaque;switch(h.output){case e.Depth:v(j,h),x.include(i,h),x.include(r,h),x.include(d,h),w&&O.uniforms.add(new f("tex",(o=>o.texture))),j.code.add(m`void main(void) {
vpos = getVertexInLocalOriginSpace();
vpos = subtractOrigin(vpos);
vpos = addVerticalOffset(vpos, localOrigin);
gl_Position = transformPosition(proj, view, vpos);
forwardTextureCoordinates();
}`),x.include(p,h),O.code.add(m`
          void main(void) {
            discardBySlice(vpos);
            ${w?m`
                    vec4 texColor = texture(tex, ${h.hasColorTextureTransform?m`colorUV`:m`vuv0`});
                    discardOrAdjustAlpha(texColor);`:""}
          }
        `);break;case e.Shadow:case e.ShadowHighlight:case e.ShadowExcludeHighlight:case e.ViewshedShadow:case e.ObjectAndLayerIdColor:v(j,h),x.include(i,h),x.include(d,h),x.include(u,h),x.include(n,h),x.include(r,h),x.include(s,h),o(x),x.varyings.add("depth","float"),w&&O.uniforms.add(new f("tex",(o=>o.texture))),j.code.add(m`void main(void) {
vpos = getVertexInLocalOriginSpace();
vpos = subtractOrigin(vpos);
vpos = addVerticalOffset(vpos, localOrigin);
gl_Position = transformPositionWithDepth(proj, view, vpos, nearFar, depth);
forwardTextureCoordinates();
forwardObjectAndLayerIdColor();
}`),x.include(p,h),O.code.add(m`
          void main(void) {
            discardBySlice(vpos);
            ${w?m`
                    vec4 texColor = texture(tex, ${h.hasColorTextureTransform?m`colorUV`:m`vuv0`});
                    discardOrAdjustAlpha(texColor);`:""}
            ${h.output===e.ObjectAndLayerIdColor?m`outputObjectAndLayerIdColor();`:m`outputDepth(depth);`}
          }
        `);break;case e.Normal:{v(j,h),x.include(i,h),x.include(t,h),x.include(l,h),x.include(d,h),x.include(u,h),w&&O.uniforms.add(new f("tex",(o=>o.texture))),h.normalType===a.ScreenDerivative&&x.varyings.add("vPositionView","vec3");const o=h.normalType===a.Attribute||h.normalType===a.Compressed;j.code.add(m`
          void main(void) {
            vpos = getVertexInLocalOriginSpace();

            ${o?m`vNormalWorld = dpNormalView(vvLocalNormal(normalModel()));`:m`
                  // Get vertex position in camera space for screen-space derivative normals
                  vPositionView = (view * vec4(vpos, 1.0)).xyz;
                `}
            vpos = subtractOrigin(vpos);
            vpos = addVerticalOffset(vpos, localOrigin);
            gl_Position = transformPosition(proj, view, vpos);
            forwardTextureCoordinates();
          }
        `),x.include(r,h),x.include(p,h),O.code.add(m`
          void main() {
            discardBySlice(vpos);
            ${w?m`
                    vec4 texColor = texture(tex, ${h.hasColorTextureTransform?m`colorUV`:m`vuv0`});
                    discardOrAdjustAlpha(texColor);`:""}

            ${h.normalType===a.ScreenDerivative?m`vec3 normal = screenDerivativeNormal(vPositionView);`:m`
                  vec3 normal = normalize(vNormalWorld);
                  if (gl_FrontFacing == false){
                    normal = -normal;
                  }`}
            fragColor = vec4(0.5 + 0.5 * normal, 1.0);
          }
        `);break}case e.Highlight:v(j,h),x.include(i,h),x.include(d,h),x.include(u,h),w&&O.uniforms.add(new f("tex",(o=>o.texture))),j.code.add(m`void main(void) {
vpos = getVertexInLocalOriginSpace();
vpos = subtractOrigin(vpos);
vpos = addVerticalOffset(vpos, localOrigin);
gl_Position = transformPosition(proj, view, vpos);
forwardTextureCoordinates();
}`),x.include(r,h),x.include(p,h),x.include(c,h),O.code.add(m`
          void main() {
            discardBySlice(vpos);
            ${w?m`
                    vec4 texColor = texture(tex, ${h.hasColorTextureTransform?m`colorUV`:m`vuv0`});
                    discardOrAdjustAlpha(texColor);`:""}
            outputHighlight();
          }
        `)}}export{x as DefaultMaterialAuxiliaryPasses};
