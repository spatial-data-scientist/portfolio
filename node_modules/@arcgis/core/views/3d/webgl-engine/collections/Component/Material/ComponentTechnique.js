/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{ViewingMode as e}from"../../../../../ViewingMode.js";import{IntegratedMeshMode as r}from"./ComponentTechniqueConfiguration.js";import{C as i}from"../../../../../../chunks/ComponentShader.glsl.js";import{ShaderOutput as t}from"../../../core/shaderLibrary/ShaderOutput.js";import{ReloadableShaderModule as o}from"../../../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as n}from"../../../core/shaderTechnique/ShaderTechnique.js";import{StencilBits as s}from"../../../lib/basicInterfaces.js";import{blendingDefault as l,oitBlending as a,oitDepthTest as u,oitDrawBuffers as c,OITPolygonOffset as d}from"../../../lib/OrderIndependentTransparency.js";import{Program as p}from"../../../lib/Program.js";import{stencilWriteMaskOn as m,replaceBitWhenDepthTestPasses as f,stencilBaseAllZerosParams as h}from"../../../lib/StencilUtils.js";import{TransparencyPassType as b}from"../../../lib/TransparencyPassType.js";import{VertexAttribute as g}from"../../../lib/VertexAttribute.js";import{SpecialDrawBuffers as O}from"../../../../../webgl/enums.js";import{makePipelineState as j,cullingParams as P,defaultDepthWriteParams as T,defaultColorWriteParams as M}from"../../../../../webgl/renderState.js";class N extends n{initializeConfiguration(r,i){i.spherical=r.viewingMode===e.Global,i.doublePrecisionRequiresObfuscation=r.rctx.driverTest.doublePrecisionRequiresObfuscation.result}initializeProgram(e){return new p(e.rctx,N.shader.get().build(this.configuration),S)}_setPipelineState(e){const i=this.configuration,o=i.integratedMeshMode!==r.None,n=e===b.NONE,p=e===b.FrontFace;return j({blending:i.output===t.Color&&i.blendingEnabled?n?l:a(e):null,culling:P(i.cullFace),depthTest:{func:u(e)},depthWrite:n||p?T:null,drawBuffers:i.output===t.Depth?{buffers:[O.NONE]}:c(e),colorWrite:M,stencilWrite:o||i.hasOccludees?m:null,stencilTest:o?f(s.IntegratedMeshMaskExcluded):i.hasOccludees?h:null,polygonOffset:n||p?i.hasPolygonOffset?{factor:2,units:2}:null:d})}initializePipeline(){return this._setPipelineState(this.configuration.transparencyPassType)}}N.shader=new o(i,(()=>import("./shader/ComponentShader.glsl.js")));const S=new Map([[g.POSITION,0],[g.NORMAL,1],[g.NORMALCOMPRESSED,1],[g.COLOR,2],[g.UV0,3],[g.UVREGION,4],[g.COMPONENTINDEX,5]]);export{N as ComponentTechnique,S as attributeLocations};
