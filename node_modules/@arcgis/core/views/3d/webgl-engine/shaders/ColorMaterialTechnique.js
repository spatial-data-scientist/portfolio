/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{ZEROS as e}from"../../../../core/libs/gl-matrix-2/factories/vec4f64.js";import{ShaderOutput as r}from"../core/shaderLibrary/ShaderOutput.js";import{ReloadableShaderModule as t}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as i}from"../core/shaderTechnique/ShaderTechnique.js";import{Default3D as s}from"../lib/DefaultVertexAttributeLocations.js";import{blendingDefault as o,oitBlending as l,oitDepthTest as n,oitDrawBuffers as a,getOITPolygonOffset as c}from"../lib/OrderIndependentTransparency.js";import{Program as p}from"../lib/Program.js";import{stencilWriteMaskOn as u,stencilToolMaskBaseParams as m,stencilBaseAllZerosParams as f}from"../lib/StencilUtils.js";import{TransparencyPassType as d}from"../lib/TransparencyPassType.js";import{VisualVariablePassParameters as h}from"../materials/VisualVariablePassParameters.js";import{C as g}from"../../../../chunks/ColorMaterial.glsl.js";import{SpecialDrawBuffers as b}from"../../../webgl/enums.js";import{makePipelineState as P,cullingParams as j,defaultDepthWriteParams as y,defaultColorWriteParams as T}from"../../../webgl/renderState.js";class O extends h{constructor(){super(...arguments),this.color=e}}class S extends i{initializeProgram(e){return new p(e.rctx,S.shader.get().build(this.configuration),s)}_createPipeline(e,t){const i=this.configuration,s=e===d.NONE,p=e===d.FrontFace;return P({blending:i.output===r.Color&&i.transparent?s?o:l(e):null,culling:j(i.cullFace),depthTest:i.draped?null:{func:n(e)},depthWrite:i.draped?null:(s||p)&&i.writeDepth?y:null,drawBuffers:i.output===r.Depth?{buffers:[b.NONE]}:a(e),colorWrite:T,stencilWrite:i.hasOccludees?u:null,stencilTest:i.hasOccludees?t?m:f:null,polygonOffset:s||p?i.polygonOffset?w:null:c(i.enableOffset)})}initializePipeline(){return this._occludeePipelineState=this._createPipeline(this.configuration.transparencyPassType,!0),this._createPipeline(this.configuration.transparencyPassType,!1)}getPipeline(e){return e?this._occludeePipelineState:super.getPipeline()}}S.shader=new t(g,(()=>import("./ColorMaterial.glsl.js")));const w={factor:1,units:1};export{O as ColorMaterialPassParameters,S as ColorMaterialTechnique};
