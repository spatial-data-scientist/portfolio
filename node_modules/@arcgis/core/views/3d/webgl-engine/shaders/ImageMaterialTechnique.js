/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import{ShaderOutput as t}from"../core/shaderLibrary/ShaderOutput.js";import{NoParameters as r}from"../core/shaderModules/interfaces.js";import{ReloadableShaderModule as i}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as o}from"../core/shaderTechnique/ShaderTechnique.js";import{parameter as s}from"../core/shaderTechnique/ShaderTechniqueConfiguration.js";import{CullFaceOptions as n}from"../lib/basicInterfaces.js";import{oitBlending as a,oitDepthTest as l,oitDepthWrite as p,oitDrawBuffers as c,getOITPolygonOffset as u}from"../lib/OrderIndependentTransparency.js";import{Program as h}from"../lib/Program.js";import{stencilWriteMaskOn as d,stencilToolMaskBaseParams as m,stencilBaseAllZerosParams as f}from"../lib/StencilUtils.js";import{TransparencyPassType as y}from"../lib/TransparencyPassType.js";import{VertexAttribute as b}from"../lib/VertexAttribute.js";import{DefaultTechniqueConfiguration as P}from"../materials/DefaultTechniqueConfiguration.js";import{I as g}from"../../../../chunks/ImageMaterial.glsl.js";import{BlendFactor as T}from"../../../webgl/enums.js";import{simpleBlendingParams as O,makePipelineState as j,cullingParams as S,defaultDepthWriteParams as v,defaultColorWriteParams as I}from"../../../webgl/renderState.js";class N extends r{}class E extends o{initializeProgram(e){return new h(e.rctx,E.shader.get().build(this.configuration),_)}_setPipelineState(e,r){const i=this.configuration,o=e===y.NONE,s=e===y.FrontFace;return j({blending:i.output===t.Color&&i.transparent?o?w:a(e):null,culling:S(i.cullFace),depthTest:{func:l(e)},depthWrite:o?i.writeDepth?v:null:p(e),drawBuffers:c(e),colorWrite:I,stencilWrite:i.hasOccludees?d:null,stencilTest:i.hasOccludees?r?m:f:null,polygonOffset:o||s?null:u(i.enableOffset)})}initializePipeline(){return this._occludeePipelineState=this._setPipelineState(this.configuration.transparencyPassType,!0),this._setPipelineState(this.configuration.transparencyPassType,!1)}getPipeline(e){return e?this._occludeePipelineState:super.getPipeline()}}E.shader=new i(g,(()=>import("./ImageMaterial.glsl.js")));const w=O(T.ONE,T.ONE_MINUS_SRC_ALPHA);class C extends P{constructor(){super(...arguments),this.output=t.Color,this.cullFace=n.None,this.hasSlicePlane=!1,this.transparent=!1,this.enableOffset=!0,this.writeDepth=!0,this.hasOccludees=!1,this.transparencyPassType=y.NONE,this.multipassEnabled=!1,this.cullAboveGround=!1,this.perspectiveInterpolation=!0}}e([s({count:t.COUNT})],C.prototype,"output",void 0),e([s({count:n.COUNT})],C.prototype,"cullFace",void 0),e([s()],C.prototype,"hasSlicePlane",void 0),e([s()],C.prototype,"transparent",void 0),e([s()],C.prototype,"enableOffset",void 0),e([s()],C.prototype,"writeDepth",void 0),e([s()],C.prototype,"hasOccludees",void 0),e([s({count:y.COUNT})],C.prototype,"transparencyPassType",void 0),e([s()],C.prototype,"multipassEnabled",void 0),e([s()],C.prototype,"cullAboveGround",void 0),e([s()],C.prototype,"perspectiveInterpolation",void 0),e([s({constValue:!1})],C.prototype,"occlusionPass",void 0);const _=new Map([[b.POSITION,0],[b.UV0,2],[b.PERSPECTIVEDIVIDE,3]]);export{N as ImageMaterialPassParameters,E as ImageMaterialTechnique,C as ImageMaterialTechniqueConfiguration,_ as vertexAttributeLocations};
