/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import{property as r}from"../../../../../core/accessorSupport/decorators/property.js";import"../../../../../core/has.js";import"../../../../../core/Logger.js";import"../../../../../core/RandomLCG.js";import{subclass as o}from"../../../../../core/accessorSupport/decorators/subclass.js";import{ZEROS as t}from"../../../../../core/libs/gl-matrix-2/factories/vec4f64.js";import{ColorFormat as n}from"../../../webgl/formats.js";import i from"../../../webgl/RenderNode.js";import{Default3D as s}from"../../lib/DefaultVertexAttributeLocations.js";import{ClearBufferBit as a,ColorAttachment as c,BlendFactor as l,SizedPixelFormat as u,PixelFormat as p,DataType as d}from"../../../../webgl/enums.js";let f=class extends i{constructor(e){super(e),this.destroyedCB=null,this.produces="composite-color",this.consumes={required:["composite-color"]},this.clearColor=t,this._focusedFBO=null,this._program=new Array}destroy(){this._program.forEach((e=>e.dispose())),this._program.length=0,this.destroyedCB()}render(e){const r=e.find((({name:e})=>"composite-color"===e));if(!this._focusedFBO)return r;const o=this.renderingContext;o.bindFramebuffer(r.fbo),o.setClearColor(0,0,0,0),o.clear(a.COLOR_BUFFER_BIT);const t=this._ensureShader(o,!1);return o.useProgram(t),o.bindTexture(this._focusedFBO.getTexture(),0),t.setUniform1i("colorTex",0),t.setUniform1i("inputType",0),o.screen.draw(),r}getReplacingFBO(e,r,o,t,i){r===h.ON&&(t=e.width,i=e.height);const s=this.renderingContext,p=e.depthStencilTexture,d=this._ensureShader(s,null!=p),f=this.fboCache.acquire(t,i,"fbo visualizer"),m=!e.colorTexture?.descriptor.hasMipmap;m&&e.colorTexture?.generateMipmap(),s.useProgram(d),s.unbindTexture(f.fbo?.colorTexture),s.bindFramebuffer(f.fbo),p&&(s.bindTexture(p,1),d.setUniform1i("depthTex",1),f.acquireColor(c.COLOR_ATTACHMENT1,n.RGBA),s.gl.drawBuffers([c.COLOR_ATTACHMENT0,c.COLOR_ATTACHMENT1]));const T=s.getViewport();s.setViewport(0,0,t,i),s.setClearColor(0,0,0,0),s.clear(a.COLOR_BUFFER_BIT),s.setBlendingEnabled(!0),s.setBlendFunction(l.ONE,l.ONE_MINUS_SRC_ALPHA),s.bindTexture(e.colorTexture,0),d.setUniform1i("colorTex",0);const v="linear-depth"===o||o.includes("shadow"),g=e.colorTexture?.descriptor.internalFormat,F=v?3:g===u.R16F||g===u.R32F||g===u.R8?1:g===u.RG8?2:g===u.RGBA16F?4:0;if(d.setUniform1i("inputType",F),v){const e=this.camera;d.setUniform2fv("nearFar",e.nearFar)}return s.screen.draw(),s.gl.drawBuffers([c.COLOR_ATTACHMENT0]),s.bindFramebuffer(null),s.setViewport(T.x,T.y,T.width,T.height),r===h.ON&&(this._focusedFBO=f),m&&e.colorTexture?.clearMipmap(),f}clearFocusedFBO(){this._focusedFBO=null}getPreviewContent(e,r,o,t){if(!o)return null;const n=this.renderingContext,i=this.fboCache.acquire(e,r,"fbo visualizer");n.bindFramebuffer(i?.fbo),n.setClearColor(this.clearColor[0],this.clearColor[1],this.clearColor[2],this.clearColor[3]),n.clear(a.COLOR_BUFFER_BIT),n.setBlendingEnabled(!0),n.setBlendFunction(l.ONE,l.ONE_MINUS_SRC_ALPHA),n.setViewport(0,0,e,r);const s=this._ensureShader(n,!1);n.useProgram(s),n.bindTexture(o.getColorTexture(t),0),s.setUniform1i("colorTex",0),s.setUniform1i("inputType",0),n.screen.draw();const c=new ImageData(new Uint8ClampedArray(e*r*4),e,r);return n.gl.readPixels(0,0,e,r,p.RGBA,d.UNSIGNED_BYTE,new Uint8Array(c.data.buffer)),n.bindFramebuffer(null),i?.release(),c}_ensureShader(e,r){const o=r?1:0;if(this._program[o])return this._program[o];const t="#version 300 es\n      in vec2 position;\n      out vec2 uv;\n\n      void main() {\n        gl_Position = vec4(position, 0.0, 1.0);\n        uv = position * 0.5 + vec2(0.5);\n      }",n=`#version 300 es\n      precision highp float;\n\n      in vec2 uv;\n      uniform sampler2D colorTex;\n      layout(location = 0) out vec4 fragColor;\n      ${r?"\n            layout(location = 1) out vec4 fragDepth;\n            uniform sampler2D depthTex;\n          ":""}\n      uniform int inputType;\n      uniform vec2 nearFar;\n\n      // Factors to convert rgba back to float\n      const vec4 RGBA_2_FLOAT_FACTORS = vec4(\n        255.0 / (256.0),\n        255.0 / (256.0 * 256.0),\n        255.0 / (256.0 * 256.0 * 256.0),\n        255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n      );\n\n\n      float rgba2float(vec4 rgba) {\n        // Convert components from 0->1 back to 0->255 and then add the components together with their corresponding\n        // fixed point factors, i.e. (256^1, 256^2, 256^3, 256^4)\n        return dot(rgba, RGBA_2_FLOAT_FACTORS);\n      }\n\n      float linearDepthFromFloat(float depth) {\n        depth = pow(depth, 0.2);\n        return -(depth * (nearFar[1] - nearFar[0]) + nearFar[0]);\n      }\n\n      float linearDepthFromRGBA(vec4 depth) {\n        return linearDepthFromFloat(rgba2float(depth));\n      }\n\n      float linearDepthFromTexture(sampler2D depthTex, vec2 uv) {\n        ivec2 iuv = ivec2(uv * vec2(textureSize(depthTex, 0)));\n        return linearDepthFromRGBA(texelFetch(depthTex, iuv, 0));\n      }\n\n      void main() {\n        vec4 color;\n        if(inputType == 1) {\n          color = vec4(vec3(texture(colorTex, uv).r), 1.0);\n        } else if(inputType == 2) {\n          color = vec4(texture(colorTex, uv).rg, 0.0, 1.0);\n        } else if(inputType == 3) {\n          float depth = 1.0 - (-linearDepthFromTexture(colorTex, uv) / (nearFar[1] - nearFar[0]));\n          color = vec4(vec3(depth), depth >= 0.999 ? 0.0 : 1.0);\n        } else if(inputType == 4) {\n          color = texture(colorTex, uv);\n          color = vec4(color.rgb / color.a, color.a);\n        } else {\n          color = texture(colorTex, uv);\n        }\n\n\n        if(color.a < 0.000001)\n          discard;\n        else {\n          fragColor = color;\n          ${r?"\n                float depth = 1.0 - pow(texture(depthTex, uv).r, 10.0);\n                fragDepth = vec4(vec3(depth), depth < 0.000001 ? 0.0 : 1.0);\n                ":""}\n        }\n      }`;return this._program[o]=e.programCache.acquire(t,n,s),this._program[o]}};var h;e([r()],f.prototype,"destroyedCB",void 0),e([r()],f.prototype,"produces",void 0),e([r()],f.prototype,"consumes",void 0),e([r()],f.prototype,"clearColor",void 0),f=e([o("esri.views.3d.webgl-engine.effects.debug.RenderNodeVisualizerNode")],f),function(e){e[e.ON=0]="ON",e[e.OFF=1]="OFF"}(h||(h={}));export{h as FocusState,f as RenderNodeVisualizerNode};
