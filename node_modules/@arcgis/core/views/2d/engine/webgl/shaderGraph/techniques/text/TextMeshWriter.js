/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{clamp as t}from"../../../../../../../core/mathUtils.js";import{pt2px as e}from"../../../../../../../core/screenUtils.js";import{GeometryCursor as o}from"../../../../../../../geometry/GeometryCursor.js";import{CIMMarkerPlacementHelper as r}from"../../../../../../../symbols/cim/placements/CIMMarkerPlacementHelper.js";import{getXDirection as i,getYDirection as s}from"../../../alignmentUtils.js";import{minMaxZoomPrecisionFactor as n,maxTextLineWidth as a,minTextLineWidth as c,magicLabelLineHeight as l,glyphSize as f}from"../../../definitions.js";import{shapeGlyphs as h}from"../../../mesh/templates/shapingUtils.js";import{packBitset as p,processColorInput as m,getMinMaxZoom as d}from"../fill/meshWriterUtils.js";import{getGeometryEngine as u}from"../mesh/loadGeometryEngine.js";import{MeshWriter as g}from"../mesh/MeshWriter.js";import{bitsetTextIsBackground as x,bitsetTextIsMapAligned as y}from"../shaders/constants.js";import{TextMeshTransformProps as _}from"./TextParams.js";import{DataType as P}from"../../../../../../webgl/enums.js";const S=28,b=[4,4],k=[16,4],T={topLeft:k,topRight:k,bottomLeft:k,bottomRight:k},B=[4,2],R=[4,6],w={topLeft:B,topRight:B,bottomLeft:R,bottomRight:R},M={topLeft:B,topRight:R,bottomLeft:B,bottomRight:R},z={topLeft:R,topRight:R,bottomLeft:b,bottomRight:b},L={topLeft:b,topRight:b,bottomLeft:R,bottomRight:R},I={topLeft:R,topRight:b,bottomLeft:R,bottomRight:b},E={topLeft:b,topRight:R,bottomLeft:b,bottomRight:R},G={createComputedParams:t=>t,optionalAttributes:{zoomRange:{type:P.UNSIGNED_SHORT,count:2,packPrecisionFactor:n,packTessellation:({minZoom:t,maxZoom:e})=>[t||0,e||S]},clipAngle:{type:P.UNSIGNED_BYTE,count:1,packTessellation:({clipAngle:t})=>A(t||0)},referenceSymbol:{type:P.BYTE,count:4,packPrecisionFactor:1,packTessellation:(t,o)=>{if(!t.referenceBounds)return[0,0,0,0];const r=i(o.horizontalAlignment),n=s(o.verticalAlignment),{offsetX:a,offsetY:c,size:l}=t.referenceBounds;return[e(a),-e(c),e(l),r+1<<2|n+1]}}},attributes:{pos:{type:P.SHORT,count:2,pack:"position",packPrecisionFactor:10},id:{type:P.UNSIGNED_BYTE,count:3,pack:"id"},bitset:{type:P.UNSIGNED_BYTE,count:1,packTessellation:({isBackground:t,mapAligned:e})=>p([[x,t],[y,!!e]])},offset:{type:P.SHORT,count:2,packPrecisionFactor:8,packAlternating:{count:4,packTessellation:({offsets:t})=>{const{bottomLeft:e,bottomRight:o,topLeft:r,topRight:i}=t;return[r,i,e,o]}}},textureUV:{type:P.SHORT,count:2,packPrecisionFactor:4,packAlternating:{count:4,packTessellation:({texcoords:t})=>{const{bottomLeft:e,bottomRight:o,topLeft:r,topRight:i}=t;return[r,i,e,o]}}},color:{type:P.UNSIGNED_BYTE,count:4,normalized:!0,packTessellation:({color:t})=>t},fontSize:{type:P.UNSIGNED_SHORT,count:1,packPrecisionFactor:4,packTessellation:({fontSize:t})=>e(t)},referenceSize:{type:P.UNSIGNED_BYTE,count:1,packPrecisionFactor:4,packTessellation:({fontSize:t},{referenceSize:o})=>e(o??t)},haloColor:{type:P.UNSIGNED_BYTE,count:4,normalized:!0,pack:({haloColor:t})=>m(t)},haloFontSize:{type:P.UNSIGNED_SHORT,count:1,packPrecisionFactor:4,pack:({haloFontSize:t})=>e(t)}}};class N extends g{constructor(){super(...arguments),this.vertexSpec=G,this._textMeshParamsPropsInitialized=!1}ensurePacked(t,e,o){super.ensurePacked(t,e,o),this._textMeshParamsPropsInitialized&&!this._evaluator.hasDynamicProperties||(this._textMeshTransformProps=new _(this.evaluatedMeshParams),this._textMeshParamsPropsInitialized=!0)}_write(t,e,o){const r=this._getShaping();if(!r)return;const i=e.getDisplayId();if(null!=this.evaluatedMeshParams.placement)return this._writePlacedTextMarkers(t,e,r,o);if(o?.nextPath())return o.nextPoint(),this._writeGlyphs(t,i,o.x,o.y,r,0);if("esriGeometryPolygon"===e.geometryType){const o=e.readCentroidForDisplay();if(!o)return;const[s,n]=o.coords;return this._writeGlyphs(t,i,s,n,r,0)}if("esriGeometryMultipoint"===e.geometryType){const o=e.readGeometryForDisplay();return void o?.forEachVertex(((e,o)=>this._writeGlyphs(t,i,e,o,r,0)))}const s=e.readXForDisplay(),n=e.readYForDisplay();return this._writeGlyphs(t,i,s,n,r,0)}_writePlacedTextMarkers(t,i,s,n){const a=n??o.fromFeatureSetReaderCIM(i);if(!a)return;const c=-1,l=r.getPlacement(a,c,this.evaluatedMeshParams.placement,e(1),t.id,u());if(!l)return;const f=i.getDisplayId();let h=l.next();for(;null!=h;){const e=h.tx,o=-h.ty,r=-h.getAngle();this._writeGlyphs(t,f,e,o,s,r),h=l.next()}}_getShaping(o){const r=this._textMeshTransformProps,i=this.evaluatedMeshParams;if(!i.glyphs?.glyphs.length)return null;const s=Math.round(e(r.fontSize)),n=e(r.offsetX),p=e(r.offsetY),m=t(e(i.lineWidth),c,a),d=l*t(i.lineHeightRatio,.25,4);return h(i.glyphs,{scale:s/f,angle:r.postAngle,xOffset:n,yOffset:p,horizontalAlignment:i.horizontalAlignment,verticalAlignment:o||i.verticalAlignment,maxLineWidth:m,lineHeight:d,decoration:i.decoration,borderLineSizePx:e(i.boxBorderLineSize),hasBackground:!!i.boxBackgroundColor,useCIMAngleBehavior:i.useCIMAngleBehavior})}_writeGlyphs(t,o,r,i,s,n,a,c){const l=this.evaluatedMeshParams,f=this._textMeshTransformProps,h=f.fontSize,p=e(f.offsetX),u=e(f.offsetY),[g,x]=d(l.scaleInfo,this.getTileInfo());0!==n&&s.setRotation(n);const y=s.bounds,_=r+y.x+p,P=i+y.y-u,S=2*(l.minPixelBuffer?l.minPixelBuffer/h:1),b=Math.max(y.width,y.height)*S;s.textBox&&(t.recordStart(this.instanceId,this.attributeLayout,s.glyphs[0].textureBinding),t.recordBounds(_,P,b,b),this._writeTextBox(t,o,r,i,s.textBox,a,c),t.recordEnd());for(const e of s.glyphs){t.recordStart(this.instanceId,this.attributeLayout,e.textureBinding),t.recordBounds(_,P,b,b);const{texcoords:s,offsets:n}=e;this._writeQuad(t,o,r,i,{texcoords:s,offsets:n,fontSize:h,color:m(l.color),isBackground:!1,referenceBounds:a,minZoom:g,maxZoom:x,...c}),t.recordEnd()}0!==n&&s.setRotation(-n)}_writeTextBox(t,e,o,r,i,s,n){const a=this.evaluatedMeshParams,{fontSize:c}=this._textMeshTransformProps,{boxBackgroundColor:l,boxBorderLineColor:f}=a,h={isBackground:!0,fontSize:c,referenceBounds:s,...n};l&&(this._writeQuad(t,e,o,r,{texcoords:T,offsets:i.main,color:m(l),...h}),f||(this._writeQuad(t,e,o,r,{texcoords:z,offsets:i.top,color:m(l),...h}),this._writeQuad(t,e,o,r,{texcoords:L,offsets:i.bot,color:m(l),...h}),this._writeQuad(t,e,o,r,{texcoords:I,offsets:i.left,color:m(l),...h}),this._writeQuad(t,e,o,r,{texcoords:E,offsets:i.right,color:m(l),...h}))),f&&(this._writeQuad(t,e,o,r,{texcoords:w,offsets:i.top,color:m(f),...h}),this._writeQuad(t,e,o,r,{texcoords:w,offsets:i.bot,color:m(f),...h}),this._writeQuad(t,e,o,r,{texcoords:M,offsets:i.left,color:m(f),...h}),this._writeQuad(t,e,o,r,{texcoords:M,offsets:i.right,color:m(f),...h}))}_writeQuad(t,e,o,r,i){const s=t.vertexCount();this._writeVertex(t,e,o,r,i),t.indexWrite(s+0),t.indexWrite(s+1),t.indexWrite(s+2),t.indexWrite(s+1),t.indexWrite(s+3),t.indexWrite(s+2)}}const A=t=>Math.round(t*(254/360));export{N as TextMeshWriter,G as TextVertexSpec,S as maxLabelZoom};
