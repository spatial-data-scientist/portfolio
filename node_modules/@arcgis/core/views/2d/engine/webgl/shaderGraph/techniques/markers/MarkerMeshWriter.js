/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{pt2px as e}from"../../../../../../../core/screenUtils.js";import{identity as t,translate as r,rotate as o}from"../../../../../../../core/libs/gl-matrix-2/math/mat2d.js";import{create as s}from"../../../../../../../core/libs/gl-matrix-2/factories/mat2df32.js";import{transformMat2d as i}from"../../../../../../../core/libs/gl-matrix-2/math/vec2.js";import{GeometryCursor as a}from"../../../../../../../geometry/GeometryCursor.js";import{maxTileCoordValue as n}from"../../../../../../../symbols/cim/constants.js";import{Alignment as c}from"../../../../../../../symbols/cim/enums.js";import{CIMMarkerPlacementHelper as m}from"../../../../../../../symbols/cim/placements/CIMMarkerPlacementHelper.js";import{minMaxZoomPrecisionFactor as l}from"../../../definitions.js";import{getMinMaxZoom as u,processColorInput as d,packByteSqrt as p,getBitMask as h}from"../fill/meshWriterUtils.js";import{ComputedMarkerParams as f}from"./ComputedMarkerParams.js";import{MarkerConstants as y}from"./markerConstants.js";import{getGeometryEngine as x}from"../mesh/loadGeometryEngine.js";import{MeshWriter as P}from"../mesh/MeshWriter.js";import{DataType as g}from"../../../../../../webgl/enums.js";const M=3.14159265359/180,k=128/Math.PI;function b(e,t){return e%=t,Math.abs(e>=0?e:e+t)}function S(e){return b(e*k,256)}function I(e,i,a,n,c=!1){const m=s(),l=c?1:-1;return t(m),(i||a)&&r(m,m,[i,-a]),n&&o(m,m,l*M*-n),m}const _={createComputedParams:e=>f.from(e),optionalAttributes:{zoomRange:{type:g.SHORT,count:2,packPrecisionFactor:l,pack:({scaleInfo:e},{tileInfo:t})=>u(e,t)}},attributes:{pos:{type:g.SHORT,count:2,pack:"position",packPrecisionFactor:10},id:{type:g.UNSIGNED_BYTE,count:3,pack:"id"},bitset:{type:g.UNSIGNED_BYTE,count:1,pack:({sprite:e,alignment:t,scaleSymbolsProportionally:r,overrideOutlineColor:o,colorLocked:s})=>{let i=0;return e.sdf&&(i|=h(y.bitset.isSDF)),t===c.MAP&&(i|=h(y.bitset.isMapAligned)),r&&(i|=h(y.bitset.scaleSymbolsProportionally)),o&&(i|=h(y.bitset.overrideOutlineColor)),s&&(i|=h(y.bitset.colorLocked)),i}},offset:{type:g.SHORT,count:2,packPrecisionFactor:4,packAlternating:{count:4,pack:({angle:e,computedWidth:t,computedHeight:r,anchorX:o,anchorY:s,offsetX:a,offsetY:n,rotateClockwise:c})=>{const m=I(0,a,n,-e,c),l=-(.5+o)*t,u=-(.5-s)*r,d=[l,u],p=[l+t,u],h=[l,u+r],f=[l+t,u+r];return i(d,d,m),i(p,p,m),i(h,h,m),i(f,f,m),[d,p,h,f]}}},textureUV:{type:g.SHORT,count:2,packPrecisionFactor:4,packAlternating:{count:4,pack:({texXmax:e,texXmin:t,texYmax:r,texYmin:o})=>[[t,o],[e,o],[t,r],[e,r]]}},color:{type:g.UNSIGNED_BYTE,count:4,normalized:!0,pack:({color:e})=>d(e)},outlineColor:{type:g.UNSIGNED_BYTE,count:4,normalized:!0,pack:({outlineColor:e})=>d(e)},sizing:{type:g.UNSIGNED_BYTE,count:4,pack:({rawWidth:e,rawHeight:t,outlineSize:r,referenceSize:o})=>{const s=Math.max(e,t);return[p(s,128),p(r,128),p(o,128),0]}},placementAngle:{type:g.UNSIGNED_BYTE,count:1,packTessellation:({placementAngle:e})=>S(e)},sizeRatio:{type:g.UNSIGNED_SHORT,count:1,packPrecisionFactor:64,pack:({sizeRatio:e})=>e}}};class v extends P{constructor(){super(...arguments),this.vertexSpec=_}getBoundsInfo(){return this.evaluatedMeshParams.boundsInfo}_write(e,t,r){const o=this.evaluatedMeshParams.sprite?.textureBinding,s=t.getDisplayId();e.recordStart(this.instanceId,this.attributeLayout,o);const i=this.evaluatedMeshParams.minPixelBuffer,a=Math.max(this.evaluatedMeshParams.computedWidth,i),c=Math.max(this.evaluatedMeshParams.computedHeight,i),m=this.evaluatedMeshParams.offsetX,l=-this.evaluatedMeshParams.offsetY;if(null!=this.evaluatedMeshParams.placement)this._writePlacedMarkers(e,t,r,a,c);else if(r?.nextPath()){r.nextPoint();const t=r.x,o=r.y;e.recordBounds(t+m,o+l,a,c),this._writeQuad(e,s,t,o)}else if("esriGeometryPolygon"===t.geometryType){const r=t.readCentroidForDisplay();if(!r)return;const[o,i]=r.coords;e.recordBounds(o+m,i+l,a,c),this._writeQuad(e,s,o,i)}else if("esriGeometryPoint"===t.geometryType){const r=t.readXForDisplay(),o=t.readYForDisplay();e.recordBounds(r+m,o+l,a,c),this._writeQuad(e,s,r,o)}else{const r=t.readGeometryForDisplay();r?.forEachVertex(((t,r)=>{e.recordBounds(t+m,r+l,a,c),Math.abs(t)>n||Math.abs(r)>n||this._writeQuad(e,s,t,r)}))}e.recordEnd()}_writePlacedMarkers(t,r,o,s,i){const c=o??a.fromFeatureSetReaderCIM(r)?.clone();if(!c)return;const l=-1,u=m.getPlacement(c,l,this.evaluatedMeshParams.placement,e(1),t.id,x());if(!u)return;const d=r.getDisplayId();let p=u.next();const h=this.evaluatedMeshParams.offsetX,f=-this.evaluatedMeshParams.offsetY;for(;null!=p;){const e=p.tx,r=-p.ty;if(Math.abs(e)>n||Math.abs(r)>n){p=u.next();continue}const o=-p.getAngle();t.recordBounds(e+h,r+f,s,i),this._writeQuad(t,d,e,r,o),p=u.next()}}_writeQuad(e,t,r,o,s){const i=e.vertexCount(),a=null==s?null:{placementAngle:s};this._writeVertex(e,t,r,o,a),e.indexWrite(i+0),e.indexWrite(i+1),e.indexWrite(i+2),e.indexWrite(i+1),e.indexWrite(i+3),e.indexWrite(i+2)}}export{v as MarkerMeshWriter,_ as MarkerVertexSpec};
