/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{identity as t,multiply as e,translate as r,scale as s,rotate as o}from"../../../../core/libs/gl-matrix-2/math/mat3.js";import{create as i}from"../../../../core/libs/gl-matrix-2/factories/mat3f32.js";import{fromValues as a}from"../../../../core/libs/gl-matrix-2/factories/vec2f32.js";import{fromValues as n}from"../../../../core/libs/gl-matrix-2/factories/vec3f32.js";import{normalizeMapX as l}from"../../../../geometry/support/normalizeUtils.js";import{getInfo as c}from"../../../../geometry/support/spatialReferenceUtils.js";import{getWorldWidth as p}from"../../viewpointUtils.js";import{brushes as m}from"../brushes.js";import{WGLDrawPhase as d}from"./enums.js";import h from"./WGLContainer.js";class f extends h{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=i()}get dvsMat3(){return this._dvsMat3}beforeRender(t){this._updateMatrices(t),this._updateOverlays(t,this.children);for(const e of this.children)e.beforeRender(t)}prepareRenderPasses(t){const e=t.registerRenderPass({name:"overlay",brushes:[m.overlay],target:()=>this.children,drawPhase:d.MAP});return[...super.prepareRenderPasses(t),e]}_updateMatrices(i){const{state:c}=i,{id:p,size:m,pixelRatio:d,resolution:h,rotation:f,viewpoint:u,displayMat3:M}=c;if(this._viewStateId===p)return;const v=Math.PI/180*f,g=d*m[0],_=d*m[1];this._localOrigin=u.targetGeometry.clone();const{x:y,y:b}=this._localOrigin,x=l(y,c.spatialReference);this._localOrigin.x=x,this._localOrigin.y=b;const j=h*g,w=h*_,R=t(this._dvsMat3);e(R,R,M),r(R,R,a(g/2,_/2)),s(R,R,n(g/j,-_/w,1)),o(R,R,-v),this._viewStateId=p}_updateOverlays(t,e){const{state:r}=t,{rotation:s,spatialReference:o,worldScreenWidth:i,size:a,viewpoint:n}=r,l=this._localOrigin;let m,d=0;const h=c(o);if(h&&o.isWrappable){const t=a[0],e=a[1],l=180/Math.PI*s,c=Math.abs(Math.cos(l)),f=Math.abs(Math.sin(l)),u=Math.round(t*c+e*f),[M,v]=h.valid,g=p(o),{x:_,y}=n.targetGeometry,b=[_,y],x=[0,0];r.toScreen(x,b);const j=[0,0];let w;w=u>i?.5*i:.5*u;const R=Math.floor((_+.5*g)/g),O=M+R*g,P=v+R*g,I=[x[0]+w,0];r.toMap(j,I),j[0]>P&&(d=g),I[0]=x[0]-w,r.toMap(j,I),j[0]<O&&(d=-g),m={worldWidth:g,xBounds:[M,v]}}for(const c of e)c.updateDrawCoords(l,d,o,m)}}export{f as default};
