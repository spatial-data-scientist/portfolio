/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import"../../../../../geometry.js";import{unquantizeOptimizedGeometry as e,convertToFeature as t}from"../../../../../layers/graphics/featureConversionUtils.js";import{OptimizedFeature as s}from"../../../../../layers/graphics/OptimizedFeature.js";import{checkProjectionSupport as r}from"../../../../../layers/graphics/data/projectionSupport.js";import{ComputedAggregateField as i}from"../aggregation/ComputedAggregateField.js";import{AAggregateStrategy as a}from"./AAggregateStrategy.js";import{ASendState as o}from"./AProcessorStrategy.js";import{FeatureTileAppendMessage as n,FeatureTileUpdateMessage as l}from"../sources/FeatureSourceMessage.js";import{ComputedAttributeStorage as c}from"../support/ComputedAttributeStorage.js";import d from"../support/FeatureFilter.js";import{FeatureMetadata as u}from"../support/FeatureMetadata.js";import{FeatureSetReaderJSON as f}from"../support/FeatureSetReaderJSON.js";import p from"../../../tiling/TileKey.js";import h from"../../../../../geometry/SpatialReference.js";class m extends o{constructor(e,t){super(e),this.bins=new Map,this.featureCache=new Map,this.done=!1,this._store=t}reset(){this.destroy(),this.done=!1}destroy(){const e=this.subscription.tile.key.level;for(const t of this.featureCache.keys())this._store.releaseDisplayIdForObjectId(`${t}.${e}`);this.bins.clear(),this.featureCache.clear(),this.handledChunks.clear()}get tile(){return this.subscription.tile}*featuresWorldSpace(){for(const t of this.featureCache.values()){const s=t.clone();s.geometry&&e(s.geometry,s.geometry,!1,!1,this.subscription.tile.transform),yield s}}}class g extends a{static async create(e,t,s,a,o){const n=new c({spatialReference:t}),l=await Promise.all(e.fields.map((async e=>i.create(n,e)))),u=e.featureFilter?await d.create({geometryType:s.metadata.geometryType,hasM:!1,hasZ:!1,timeInfo:s.metadata.timeInfo,fieldsIndex:s.metadata.fieldsIndex,spatialReference:t,filterJSON:e.featureFilter}):null;return"geohash"===e.index.type&&await r(t,h.WGS84),new g(e,u,o,l,t,s,a)}constructor(e,t,s,r,i,a,o){super(a,o,i,r),this._schema=e,this._featureFilter=t,this._timeZone=s,this._metadata=new u({geometryType:"esriGeometryPolygon",objectIdField:"aggregateId",fields:e.fields,globalIdField:null,spatialReference:a.metadata.spatialReference,subtypeField:null,subtypes:null,timeInfo:null,timeReferenceUnknownClient:null,typeIdField:null,types:null})}createState(e){return new m(e,this._attributeStore)}async*applyLocalEdit(e){for(const t of this._sendStates.values()){t.reset();const e=new n(t.subscription,f.empty(this._source.metadata),!0,!1,{});yield e}}displayMap(e,t,s){const r=new Map(e.map((e=>[t(e),e]))),i=[];for(const a of this._sendStates.values())for(const e of a.featuresWorldSpace()){const{objectId:t,displayId:a}=e,o=r.get(t);if(null!=o){const e=s(a,o,t);i.push(e),r.delete(t)}}return i}getDisplayFeatures(e){const s=new Set(e),r=new Set,i=[];for(const a of this._sendStates.values())for(const e of a.featuresWorldSpace())s.has(e.displayId)&&!r.has(e.objectId)&&(e.geometry&&i.push({...t(e,this._metadata.geometryType,!1,!1),displayId:e.displayId}),r.add(e.objectId));return{features:[],aggregates:i}}getFeatureObjectIdsForAggregate(e){for(const t of this._sendStates.values())for(const s of t.bins.values())if(s.id===e)return Array.from(s.containedObjectIds);return[]}async*updateChunks(){if(this._source.chunks().length)for(const e of this._sendStates.values())yield*this._update(e,this._source)}forEachAggregateWorldSpace(e){for(const t of this._sendStates.values())for(const s of t.featuresWorldSpace())e(s)}_createIndexOptions(e){switch(this._schema.index.type){case"geohash":return{type:"geohash",fields:this.aggregateFields,featureFilter:this._featureFilter,geohashLevel:this._schema.index.fixBinLevel,spatialReference:this.spatialReference,timeZone:this._timeZone,scale:e.scale};case"grid":{const t=this._schema.index.fixedBinLevel,s=null!=t?e.tileInfoView.getLODInfoAt(t).scale:e.scale;return{type:"grid",fields:this.aggregateFields,cellSize:this._schema.index.size,featureFilter:this._featureFilter,spatialReference:this.spatialReference,timeZone:this._timeZone,scale:s}}}}async*_update(e,t){const{handledChunks:r,subscription:i,bins:a,featureCache:o}=e,n=i.tile;if(e.done)return;for(const s of t.chunks()){if(r.has(s.chunkId))continue;r.add(s.chunkId);const t=s.queryInfo;if("tileId"in t){const e=new p(t.tileId);if(e.level!==n.level||e.world!==n.key.world)continue}s.getAggregateIndex(this._createIndexOptions(e.tile)).putBounded(a,e.tile.extent,e.tile.resolution)}const c=[],d=i.tile.transform,u=i.tile.key.level;for(const l of a.values()){let e=o.get(l.id);if(e)e.attributes=l.getAttributes();else{const t=l.getGeometry(this.spatialReference,d);e=new s(t,l.getAttributes(),null),t||(e.centroid=l.getGeometricCentroid(this.spatialReference,d)),e.objectId=l.id,e.displayId=this._attributeStore.createDisplayIdForObjectId(`${e.objectId}.${u}`),o.set(l.id,e)}c.push(e)}this.events.emit("changed"),e.done=!t.updateTracking.updating;const h=f.fromOptimizedFeatures(c,this._metadata,d),m=h.getCursor(),g=e.subscription.tile.createArcadeEvaluationOptions(this._timeZone);for(;m.next();)this._attributeStore.setAttributeData(m.getDisplayId(),m,g);const y=new l(e.subscription,h,[],e.done,{});yield y}}export{m as BinningState,g as BinningStrategy};
