import type { ShaderPass } from '@luma.gl/shadertools';
import { Color } from '@deck.gl/core';
export type HeatmapProps = {
    /**
     * Radius of the heatmap blur in pixels, to which the weight of a cell is distributed.
     *
     * @default 20
     */
    radiusPixels?: number;
    /**
     * Controls how weight values are mapped to the `colorRange`, as an array of two numbers [`minValue`, `maxValue`].
     *
     * @default [0, 1]
     */
    colorDomain?: [number, number];
    /**
     * Specified as an array of colors [color1, color2, ...].
     *
     * @default `6-class YlOrRd` - [colorbrewer](http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6)
     */
    colorRange: Color[];
    /**
     * Value that is multiplied with the total weight at a pixel to obtain the final weight. A value larger than 1 biases the output color towards the higher end of the spectrum, and a value less than 1 biases the output color towards the lower end of the spectrum.
     */
    intensity?: number;
    opacity: number;
};
export type HeatmapUniforms = {
    delta?: [number, number];
    radiusPixels?: number;
    colorDomain?: [number, number];
    color1?: [number, number, number];
    color2?: [number, number, number];
    color3?: [number, number, number];
    color4?: [number, number, number];
    color5?: [number, number, number];
    color6?: [number, number, number];
    intensity: number;
    opacity?: number;
};
export declare const heatmap: ShaderPass<HeatmapProps, HeatmapUniforms>;
//# sourceMappingURL=heatmap.d.ts.map