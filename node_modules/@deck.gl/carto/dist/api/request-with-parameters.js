import { VERSION } from '@deck.gl/core';
import { isPureObject } from "../utils.js";
import { CartoAPIError } from "./carto-api-error.js";
import { MAX_GET_LENGTH, V3_MINOR_VERSION } from "./common.js";
/**
 * Parameters added to all requests issued with `requestWithParameters()`.
 * These parameters override parameters already in the base URL, but not
 * user-provided parameters.
 */
const DEFAULT_PARAMETERS = {
    v: V3_MINOR_VERSION,
    deckglVersion: VERSION
};
const DEFAULT_HEADERS = {
    Accept: 'application/json',
    'Content-Type': 'application/json'
};
const REQUEST_CACHE = new Map();
export async function requestWithParameters({ baseUrl, parameters = {}, headers: customHeaders = {}, errorContext }) {
    parameters = { ...DEFAULT_PARAMETERS, ...parameters };
    baseUrl = excludeURLParameters(baseUrl, Object.keys(parameters));
    const key = createCacheKey(baseUrl, parameters, customHeaders);
    if (REQUEST_CACHE.has(key)) {
        return REQUEST_CACHE.get(key);
    }
    const url = createURLWithParameters(baseUrl, parameters);
    const headers = { ...DEFAULT_HEADERS, ...customHeaders };
    /* global fetch */
    const fetchPromise = url.length > MAX_GET_LENGTH
        ? fetch(baseUrl, { method: 'POST', body: JSON.stringify(parameters), headers })
        : fetch(url, { headers });
    let response;
    let responseJson;
    const jsonPromise = fetchPromise
        .then((_response) => {
        response = _response;
        return response.json();
    })
        .then((json) => {
        responseJson = json;
        if (!response || !response.ok) {
            throw new Error(json.error);
        }
        return json;
    })
        .catch((error) => {
        REQUEST_CACHE.delete(key);
        throw new CartoAPIError(error, errorContext, response, responseJson);
    });
    REQUEST_CACHE.set(key, jsonPromise);
    return jsonPromise;
}
function createCacheKey(baseUrl, parameters, headers) {
    const parameterEntries = Object.entries(parameters).sort(([a], [b]) => (a > b ? 1 : -1));
    const headerEntries = Object.entries(headers).sort(([a], [b]) => (a > b ? 1 : -1));
    return JSON.stringify({ baseUrl, parameters: parameterEntries, headers: headerEntries });
}
/**
 * Appends query string parameters to a URL. Existing URL parameters are kept,
 * unless there is a conflict, in which case the new parameters override
 * those already in the URL.
 */
function createURLWithParameters(baseUrlString, parameters) {
    const baseUrl = new URL(baseUrlString);
    for (const [key, value] of Object.entries(parameters)) {
        if (isPureObject(value) || Array.isArray(value)) {
            baseUrl.searchParams.set(key, JSON.stringify(value));
        }
        else {
            baseUrl.searchParams.set(key, value.toString());
        }
    }
    return baseUrl.toString();
}
/**
 * Deletes query string parameters from a URL.
 */
function excludeURLParameters(baseUrlString, parameters) {
    const baseUrl = new URL(baseUrlString);
    for (const param of parameters) {
        if (baseUrl.searchParams.has(param)) {
            baseUrl.searchParams.delete(param);
        }
    }
    return baseUrl.toString();
}
